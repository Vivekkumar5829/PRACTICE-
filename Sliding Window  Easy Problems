// 1. Find the max sum subarray of fixed size.
    public static int maxSubarraySum(int[] arr, int k){
        int maxValue = Integer.MIN_VALUE;
        int currentRunningSum = 0;

        for(int i = 0; i < arr.length; i++){
            currentRunningSum += arr[i];
            if(i >= k - 1){
                maxValue = Math.max(maxValue,currentRunningSum);
                currentRunningSum -= arr[i - (k - 1)];
            }
        }
        return maxValue;
    }


// 2. Smallest subarray with the given sum.
    public static int smallestSubarray(int[] arr, int targetSum){
        int minWindowSize = Integer.MAX_VALUE;
        int currentWindowSum = 0;
        int windowStart = 0;

        for(int windowEnd = 0; windowEnd < arr.length; windowEnd++){
            currentWindowSum += arr[windowEnd];
            while (currentWindowSum >= targetSum){
                minWindowSize = Math.min(minWindowSize,windowEnd - windowStart + 1);
                currentWindowSum -= arr[windowStart];
                windowStart++;
            }
        }
        return minWindowSize;
    }
