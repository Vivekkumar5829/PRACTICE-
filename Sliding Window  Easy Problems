// 1. Find the max sum subarray of fixed size.
    public static int maxSubarraySum(int[] arr, int k){
        int maxValue = Integer.MIN_VALUE;
        int currentRunningSum = 0;

        for(int i = 0; i < arr.length; i++){
            currentRunningSum += arr[i];
            if(i >= k - 1){
                maxValue = Math.max(maxValue,currentRunningSum);
                currentRunningSum -= arr[i - (k - 1)];
            }
        }
        return maxValue;
    }


// 2. Smallest subarray with the given sum.
    public static int smallestSubarray(int[] arr, int targetSum){
        int minWindowSize = Integer.MAX_VALUE;
        int currentWindowSum = 0;
        int windowStart = 0;

        for(int windowEnd = 0; windowEnd < arr.length; windowEnd++){
            currentWindowSum += arr[windowEnd];
            while (currentWindowSum >= targetSum){
                minWindowSize = Math.min(minWindowSize,windowEnd - windowStart + 1);
                currentWindowSum -= arr[windowStart];
                windowStart++;
            }
        }
        return minWindowSize;
    }


//3. 1876. Substrings of Size Three with Distinct Characters.
    public static int countGoodSubstrings(String s) {
       int i = 0;
       int j = 0;
       int count = 0;

       while (j < s.length()){
           if(j - i + 1 == 3) {
               if(s.charAt(i) != s.charAt(i + 1) && s.charAt(i + 1) != s.charAt(i + 2) && s.charAt(i + 2) != s.charAt(i)){
                   count++;
               }
               i++;

           }
           j++;
       }
       return count;
    }


    // 4. 1652. Defuse the Bomb.
    public static int[] decrypt(int[] code, int k) {
        int[] result = new int[code.length];
        if(k == 0){
            Arrays.fill(result,0);
        }

        if(k > 0){
            for(int i = 0; i < code.length; i++){
                int sum = 0;
                int j = 1;
                while (j <= k){
                    sum += code[(i + j) % code.length];
                    j++;
                }
                result[i] = sum;
            }
        }

        if(k < 0){
            for (int i = 0; i < code.length; i++){
                int sum = 0;
                int j = 1;
                while (j <= k * -1){
                    int index = (i - j) % code.length;
                    if(index < 0){
                        index = index + code.length;
                    }
                    sum += code[index];
                    j++;
                }
                result[i] = sum;

            }

        }

        return result;
    }



// 5. 2269. Find the K-Beauty of a Number.
public:
    int divisorSubstrings(int num, int k) {
       int n = num;
       long mod = pow(10,k);
       int cnt = 0;
       while(n >= mod/10){
           int div = n % mod;
           if(div != 0 && num % div == 0) cnt++;
           n /= 10;

       }
       return cnt;
    }


    // 6. 2379. Minimum Recolors to Get K Consecutive Black Blocks.
    public static int minimumRecolors(String blocks, int k) {
        int result = Integer.MAX_VALUE;
        for(int i = 0; i <= blocks.length() - k; i++){
            String substr = blocks.substring(i,k+i);
            int count = 0;
            for (int j = 0; j <substr.length(); j++){
                if(substr.charAt(j) == 'W'){
                    count++;
                }
            }
             result = Math.min(result,count);
        }
        return result;
    }
