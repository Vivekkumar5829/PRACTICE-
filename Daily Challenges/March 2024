01 == // 2864. Maximum Odd Binary Number.
    public static String maximumOddBinaryNumber(String s) {
        int count = 0;
        for(char ch : s.toCharArray()){
            if(ch == '1'){
                count++;
            }
        }
        char[] result = new char[s.length()];
        Arrays.fill(result,'0');
        if(count == 1){
            result[result.length - 1] = '1';
        }else if(count > 1){
            result[result.length - 1] = '1';
            for(int i = 0; i < count - 1; i++){
                result[i] = '1';
            }
        }
        StringBuilder sb = new StringBuilder();
        for(char ch : result){
            sb.append(ch);
        }

        return sb.toString();
    }

02 == // 977. Squares of a Sorted Array.
public static int[] sortedSquares(int[] nums) {
    int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            result[i] = nums[i] * nums[i];
        }
        Arrays.sort(result);
        return result;
    }


03 == // 19. Remove Nth Node From End of List 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
       int size = countTheLength(head);
        int rem = size - n - 1;
       if(rem == -1){
           return head.next;
       }
       ListNode temp = head;
       for(int i = 0; i < rem; i++){
           temp = temp.next;
       }
       temp.next = temp.next.next;

       return head;
    }

    public  int countTheLength(ListNode head){
        int count = 0;
        if(head == null){
            return count;
        }
        ListNode currentNode = head;
        while(currentNode != null){
            count++;
            currentNode = currentNode.next;
            }
        return count;
    }

}

04 == // 948. Bag of Tokens
public int bagOfTokensScore(int[] tokens, int power) {
         Arrays.sort(tokens);
        int s = 0;
        int maxi = 0;
        int l = 0, r = tokens.length - 1;

        while (l <= r) {
            if (power >= tokens[l]) {
                power -= tokens[l];
                s++;
                l++;
                maxi = Math.max(maxi, s);
            } else if (s > 0) {
                power += tokens[r];
                s--;
                r--;
            } else {
                break;
            }
        }

        return maxi;
    }

05 == 1750. Minimum Length of String After Deleting Similar Ends.
    public static int minimumLength(String s) {

        int start = 0;
        int end = s.length() - 1;
        while (start < end && s.charAt(start) == s.charAt(end)){
            char present = s.charAt(start);

            while (start <= end && s.charAt(start) == present){
                start++;
            }
            while (start <= end && s.charAt(end) == present){
                end--;
            }
        }


        return (end - start + 1);
    }


06 == 141. Linked List Cycle.
 public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null){
           
            slow = slow.next;
            fast = fast.next.next;
             if(slow == fast){
                return true;
            }
        }
        return false;
    }


07 == 876. Middle of the Linked List.
public ListNode middleNode(ListNode head) {
          ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }


08 == 3005. Count Elements With Maximum Frequency
public int maxFrequencyElements(int[] nums) {
         HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : nums){
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        int max = Integer.MIN_VALUE;

        for(int i : map.values()){
            if(i > max){
                max = i;
            }
        }

        int result = 0;

        for(int i : map.keySet()){
            if(map.get(i) == max){
                result += map.get(i);
            }
        }
        
        return result;
    }


09 ==  2540. Minimum Common Value.
    public int getCommon(int[] nums1, int[] nums2) {
        int matched = 0;
        for(int i = 0; i < nums1.length; i++){
            matched = isEqual(nums1[i], nums2);

            if(matched != -1){
                break;
            }
        }
        return matched;
    }

    private static int isEqual(int target, int[] nums2) {
        int start = 0;
        int end = nums2.length - 1;
        int minResult = -1;

        while (start <= end){
            int mid = start + (end - start)/2;

            if(nums2[mid] == target){
                minResult = nums2[mid];
                return minResult;
            } else if (nums2[mid] > target) {
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return minResult;
    }


10 == 
    public int[] intersection(int[] nums1, int[] nums2) {
            HashSet<Integer> set = new HashSet<Integer>();
        for(int i : nums1){
            set.add(i);
        }
        HashSet<Integer> intersection = new HashSet<Integer>();
        for(int i : nums2){
            if(set.contains(i)){
                intersection.add(i);
            }
        }
        int[] result = new int[intersection.size()];
        int j = 0;
        for(int i : intersection){
            result[j++] =  i;

        }
        return result;
    }


 // 11 == 791. Custom Sort String
    public String customSortString(String order, String s) {
        StringBuilder result = new StringBuilder();
        HashMap<Character, Integer> mp = new HashMap<>();
        for (char c : s.toCharArray()) {
            mp.put(c, mp.getOrDefault(c, 0) + 1);
        }
        for (char c : order.toCharArray()) {
            if (mp.containsKey(c)) {
                result.append(String.valueOf(c).repeat(Math.max(0, mp.get(c))));
                mp.remove(c);
            }
        }
        for (char c : mp.keySet()) {
            result.append(String.valueOf(c).repeat(Math.max(0, mp.get(c))));
        }
        return result.toString();
    }


// 12 == 1171. Remove Zero Sum Consecutive Nodes from Linked List.
 public static ListNode removeZeroSumSublists(ListNode head) {
                int prefixSum = 0;
        Map<Integer, ListNode> sumNodeMp = new HashMap<>();
        ListNode dummyHead = new ListNode();
        dummyHead.next = head;
        sumNodeMp.put(0, dummyHead);
        for(ListNode curr = head; curr != null; curr = curr.next){
            prefixSum += curr.val;
            if(sumNodeMp.containsKey(prefixSum)){
                ListNode prevAnchor = sumNodeMp.get(prefixSum);
                int sumToBeRmd = prefixSum;
                while(prevAnchor != curr){
                    prevAnchor = prevAnchor.next;
                    sumToBeRmd += (prevAnchor != null ) ? prevAnchor.val : 0;
                    if(prevAnchor != curr)
                    sumNodeMp.remove(sumToBeRmd);

                }
                sumNodeMp.get(prefixSum).next = curr.next;
            }else if(prefixSum != 0)
                sumNodeMp.put(prefixSum, curr);
        }
        return dummyHead.next;
    }

// 13 == 930. Binary Subarrays With Sum.
public int numSubarraysWithSum(int[] nums, int goal) {
        return atMost(nums, goal) - atMost(nums, goal - 1);
    }
    private int atMost(int[] nums, int goal) {
        int head, tail = 0, sum = 0, result = 0;
        for (head = 0; head < nums.length; head++) {
            sum += nums[head];
            while (sum > goal && tail <= head) {
                sum -= nums[tail];
                tail++;
            }
            result += head - tail + 1;
        }
        return result;
        }


    // 14 == 238. Product of Array Except Self.
    public static int[] productExceptSelf(int[] nums) {
        int N = nums.length;
        int[] leftProduct = new int[N];
        int[] rightProduct = new int[N];

        int[] outputProduct = new int[N];

        leftProduct[0] = 1;
        rightProduct[N - 1] = 1;

        for(int i = 1; i < N; i++){
            leftProduct[i] = nums[i - 1] * leftProduct[i - 1];
        }
        for(int i = N- 2; i >= 0; i--){
            rightProduct[i] = nums[i + 1] * rightProduct[i + 1];
        }
        for(int i = 0; i < N; i++){
            outputProduct[i] = leftProduct[i] * rightProduct[i];
        }
        return outputProduct;
    }

