01 == // 2864. Maximum Odd Binary Number.
    public static String maximumOddBinaryNumber(String s) {
        int count = 0;
        for(char ch : s.toCharArray()){
            if(ch == '1'){
                count++;
            }
        }
        char[] result = new char[s.length()];
        Arrays.fill(result,'0');
        if(count == 1){
            result[result.length - 1] = '1';
        }else if(count > 1){
            result[result.length - 1] = '1';
            for(int i = 0; i < count - 1; i++){
                result[i] = '1';
            }
        }
        StringBuilder sb = new StringBuilder();
        for(char ch : result){
            sb.append(ch);
        }

        return sb.toString();
    }

02 == // 977. Squares of a Sorted Array.
public static int[] sortedSquares(int[] nums) {
    int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            result[i] = nums[i] * nums[i];
        }
        Arrays.sort(result);
        return result;
    }


03 == // 19. Remove Nth Node From End of List 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
       int size = countTheLength(head);
        int rem = size - n - 1;
       if(rem == -1){
           return head.next;
       }
       ListNode temp = head;
       for(int i = 0; i < rem; i++){
           temp = temp.next;
       }
       temp.next = temp.next.next;

       return head;
    }

    public  int countTheLength(ListNode head){
        int count = 0;
        if(head == null){
            return count;
        }
        ListNode currentNode = head;
        while(currentNode != null){
            count++;
            currentNode = currentNode.next;
            }
        return count;
    }

}
