// 1 == 58. Length of Last Word.
public int lengthOfLastWord(String s) {
        String[] arr = s.split(" ");
        return arr[arr.length - 1].length();
    }


// 2 == 205. Isomorphic Strings.
        public static boolean isIsomorphic(String s, String t) {
            HashMap<Character,Character> map = new HashMap<>();
            int i = 0;
             while (i < s.length()){
                 if(!map.containsKey(s.charAt(i))) {
                     if(map.containsValue(t.charAt(i))){
                         return false;
                     }else {
                         map.put(s.charAt(i), t.charAt(i));
                     }
                 }else{
                     if(map.get(s.charAt(i)) != t.charAt(i)){
                        return false;
                     }
                 }
                 i++;
             }

             System.out.println(map);
             return true;

        }

// 3 == 79. Word Search.
 public boolean exist(char[][] board, String word) {
        
    int m = board.length;
        int n = board[0].length;

        boolean[][] visited = new boolean[m][n];
        boolean result = false;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0)) {
                    result = backtrack(board, word, visited, i, j, 0);
                    if (result) return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean backtrack(char[][] board, String word, boolean[][] visited, int i, int j, int index) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(index)) {
            return false;
        }
        
        visited[i][j] = true;
        
        if (backtrack(board, word, visited, i + 1, j, index + 1) ||
            backtrack(board, word, visited, i - 1, j, index + 1) ||
            backtrack(board, word, visited, i, j + 1, index + 1) ||
            backtrack(board, word, visited, i, j - 1, index + 1)) {
            return true;
        }
        
        visited[i][j] = false;
        return false;
    }

// 4 == 1614. Maximum Nesting Depth of the Parentheses.
public int maxDepth(String s) {
        int max = 0;
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '('){
                count++;
            }else if(s.charAt(i) == ')'){
                count--;
            }
            max = Math.max(max , count);
        }
        return max;
    }
