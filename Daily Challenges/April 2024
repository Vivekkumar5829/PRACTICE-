// 1 == 58. Length of Last Word.
public int lengthOfLastWord(String s) {
        String[] arr = s.split(" ");
        return arr[arr.length - 1].length();
    }


// 2 == 205. Isomorphic Strings.
        public static boolean isIsomorphic(String s, String t) {
            HashMap<Character,Character> map = new HashMap<>();
            int i = 0;
             while (i < s.length()){
                 if(!map.containsKey(s.charAt(i))) {
                     if(map.containsValue(t.charAt(i))){
                         return false;
                     }else {
                         map.put(s.charAt(i), t.charAt(i));
                     }
                 }else{
                     if(map.get(s.charAt(i)) != t.charAt(i)){
                        return false;
                     }
                 }
                 i++;
             }

             System.out.println(map);
             return true;

        }

// 3 == 79. Word Search.
 public boolean exist(char[][] board, String word) {
        
    int m = board.length;
        int n = board[0].length;

        boolean[][] visited = new boolean[m][n];
        boolean result = false;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0)) {
                    result = backtrack(board, word, visited, i, j, 0);
                    if (result) return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean backtrack(char[][] board, String word, boolean[][] visited, int i, int j, int index) {
        if (index == word.length()) {
            return true;
        }
        
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(index)) {
            return false;
        }
        
        visited[i][j] = true;
        
        if (backtrack(board, word, visited, i + 1, j, index + 1) ||
            backtrack(board, word, visited, i - 1, j, index + 1) ||
            backtrack(board, word, visited, i, j + 1, index + 1) ||
            backtrack(board, word, visited, i, j - 1, index + 1)) {
            return true;
        }
        
        visited[i][j] = false;
        return false;
    }

// 4 == 1614. Maximum Nesting Depth of the Parentheses.
public int maxDepth(String s) {
        int max = 0;
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '('){
                count++;
            }else if(s.charAt(i) == ')'){
                count--;
            }
            max = Math.max(max , count);
        }
        return max;
    }


// 5 1544. Make The String Great.
 public String makeGood(String s) {
         Stack<Character> stk = new Stack<>();
        for(int i = s.length() - 1; i >= 0; i--) {
            if (!stk.isEmpty() && stk.peek()!=s.charAt(i)) {
                String s1 = s.charAt(i) + "";
                String s2 = stk.peek() + "";
                if (s1.equalsIgnoreCase(s2)) {
                    stk.pop();
                }else{
                    stk.push(s.charAt(i));
                }
            }else {
                stk.push(s.charAt(i));
            }
        }
        StringBuilder sb = new StringBuilder();
        for(char ch : stk){
            sb.append(ch);
        }

        return sb.reverse().toString();
    }


//7. 1249. Minimum Remove to Make Valid Parentheses
 public String minRemoveToMakeValid(String s) {
           // Initialize pointers for the start and end of the string
        int startPointer = 0;
        int endPointer = s.length() - 1;

        String result;

        // Convert input string to character array for easier manipulation
        char[] arr = s.toCharArray();
        
        // Counter for open parentheses
        int openParenthesesCount = 0;

        // First pass: mark excess closing parentheses with '*'
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '(')
                openParenthesesCount++;
            else if (arr[i] == ')') {
                if (openParenthesesCount == 0)
                    arr[i] = '*'; // Mark excess closing parentheses
                else
                    openParenthesesCount--;
            }
        }

        // Second pass: mark excess opening parentheses from the end
        for (int i = arr.length - 1; i >= 0; i--) {
            if (openParenthesesCount > 0 && arr[i] == '(') {
                arr[i] = '*'; // Mark excess opening parentheses
                openParenthesesCount--;
            }
        }
        
        // Filter out marked characters and store the result in the character array
        int p = 0; // Pointer for updating the character array
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != '*')
                arr[p++] = arr[i];
        }

        // Construct the result string from the filtered character array
        result = new String(arr).substring(0, p);

        return result;
    }


// 8 == 1700. Number of Students Unable to Eat Lunch
public int countStudents(int[] students, int[] sandwiches) {
        Deque<Integer> que = new LinkedList<>();
        for(int i : students){
            que.add(i);
        }

        Stack<Integer> stk = new Stack<>();
        for(int i = sandwiches.length -  1; i >= 0; i--){
            stk.push(sandwiches[i]);
        }
        int count = 0;
        int eaten = 0;

        while (!stk.isEmpty()){
            if(Objects.equals(stk.peek(), que.peek())){
                count = 0;
                eaten++;
                stk.pop();
                que.poll();
            }else{
                count++;
                int temp = que.peekFirst();
                que.pollFirst();
                que.add(temp);
            }
            if(count == que.size()){
                break;
            }
        }
        return students.length - eaten;
    }

// 9 == 2073. Time Needed to Buy Tickets.
 public int timeRequiredToBuy(int[] tickets, int k) {
        Queue<Integer> que = new LinkedList<>();

        for(int i = 0; i < tickets.length; i++){
            que.add(i);
        }
        int count = 0;
        while (!que.isEmpty()){
            ++count;

            int front = que.poll();
            if(tickets[front] >= 1){
                tickets[front]--;
            }
            if(k == front && tickets[front] == 0){
                break;
            }
            if(k != front && tickets[front] == 0){
                continue;
            }
            que.add(front);
        }
        return count;
    }


// 10 == 950. Reveal Cards In Increasing Order.
public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck); // Sort the deck in increasing order
        
        int n = deck.length;
        int[] result = new int[n];
        Deque<Integer> indices = new LinkedList<>();
        
        for (int i = 0; i < n; i++) {
            indices.add(i); // Initialize deque with indices 0, 1, 2, ..., n-1
        }
        
        for (int card : deck) {
            int idx = indices.poll(); // Get the next available index
            result[idx] = card; // Place the card in the result array
            if (!indices.isEmpty()) {
                indices.add(indices.poll()); // Move the used index to the end of deque
            }
        }
        
        return result;
    }


// 12 == 402. Remove K Digits.
public String removeKdigits(String num, int k) {
        Stack<Character> stack = new Stack<>();
        
        for (char digit : num.toCharArray()) {
            while (!stack.isEmpty() && k > 0 && stack.peek() > digit) {
                stack.pop();
                k--;
            }
            stack.push(digit);
        }
        
        // Remove remaining k digits from the end of the stack
        while (k > 0 && !stack.isEmpty()) {
            stack.pop();
            k--;
        }
        
        // Construct the resulting string from the stack
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        sb.reverse(); // Reverse to get the correct order
        
        // Remove leading zeros
        while (sb.length() > 0 && sb.charAt(0) == '0') {
            sb.deleteCharAt(0);
        }
        
        // Handle edge case where result might be empty
        return sb.length() > 0 ? sb.toString() : "0";
    }



// 12 == 42. Trapping Rain Water
public int trap(int[] height) {
        int n = height.length;
        if (n == 0) return 0;
        
        int[] left = new int[n];
        int[] right = new int[n];
        int storedWater = 0;
        
        // Fill left array
        left[0] = height[0];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], height[i]);
        }
        
        // Fill right array
        right[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(right[i + 1], height[i]);
        }
        
        // Calculate trapped water
        for (int i = 0; i < n; i++) {
            int minHeight = Math.min(left[i], right[i]);
            storedWater += minHeight - height[i];
        }
        
        return storedWater;
    }


// 13 == 85. Maximal Rectangle.
public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;

        int rows = matrix.length;
        int cols = matrix[0].length;
        int[] heights = new int[cols + 1]; // Include an extra element for easier calculation
        int maxArea = 0;

        for (char[] row : matrix) {
            for (int i = 0; i < cols; i++) {
                heights[i] = (row[i] == '1') ? heights[i] + 1 : 0;
            }

            // Calculate max area using stack-based method
            Stack<Integer> stack = new Stack<>();
            for (int i = 0; i < heights.length; i++) {
                while (!stack.isEmpty() && heights[i] < heights[stack.peek()]) {
                    int h = heights[stack.pop()];
                    int w = stack.isEmpty() ? i : i - stack.peek() - 1;
                    maxArea = Math.max(maxArea, h * w);
                }
                stack.push(i);
            }
        }

        return maxArea;
    }
