// 1. 3110. Score of a String.
public int scoreOfString(String s) {
        int total = 0;
        for(int i = 0; i < s.length() - 1; i++) {
            total += Math.abs(s.charAt(i) - s.charAt(i + 1));
        }
        return total;
    }


// 2. 344. Reverse String.
    public void reverseString(char[] s) {
           helper(s,0,s.length - 1);
    }
     public static char[] helper(char[] s, int start, int end){
        if(start > end){
            return s;
        }
        char temp = s[start];
        s[start] = s[end];
        s[end] = temp;
        return helper(s,start + 1,end - 1);
    }

 public int appendCharacters(String s, String t) {
        int sIndex = 0, tIndex = 0;
        int sLength = s.length(), tLength = t.length();
        
        while (sIndex < sLength && tIndex < tLength) {
            if (s.charAt(sIndex) == t.charAt(tIndex)) {
                tIndex++;
            }
            sIndex++;
        }
        
        return tLength - tIndex;
        
    }


// 4. 409. Longest Palindrome.
public int longestPalindrome(String s) {
        // Initialize a set to keep track of characters with odd frequencies
        HashSet<Character> charSet = new HashSet<>();
        // Initialize the length of the longest palindrome
        int length = 0;
        
        // Iterate over each character in the string
        for (char c : s.toCharArray()) {
            // If the character is already in the set, remove it and increase the length by 2
            if (charSet.contains(c)) {
                charSet.remove(c);
                length += 2;
            } else {
                // If the character is not in the set, add it to the set
                charSet.add(c);
            }
        }
        
        // If there are any characters left in the set, add 1 to the length for the middle character
        if (!charSet.isEmpty()) {
            length += 1;
        }
        
        // Return the total length of the longest palindrome
        return length;
    }
