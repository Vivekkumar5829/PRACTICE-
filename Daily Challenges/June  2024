// 1. 3110. Score of a String.
public int scoreOfString(String s) {
        int total = 0;
        for(int i = 0; i < s.length() - 1; i++) {
            total += Math.abs(s.charAt(i) - s.charAt(i + 1));
        }
        return total;
    }


// 2. 344. Reverse String.
    public void reverseString(char[] s) {
           helper(s,0,s.length - 1);
    }
     public static char[] helper(char[] s, int start, int end){
        if(start > end){
            return s;
        }
        char temp = s[start];
        s[start] = s[end];
        s[end] = temp;
        return helper(s,start + 1,end - 1);
    }

 public int appendCharacters(String s, String t) {
        int sIndex = 0, tIndex = 0;
        int sLength = s.length(), tLength = t.length();
        
        while (sIndex < sLength && tIndex < tLength) {
            if (s.charAt(sIndex) == t.charAt(tIndex)) {
                tIndex++;
            }
            sIndex++;
        }
        
        return tLength - tIndex;
        
    }


// 4. 409. Longest Palindrome.
public int longestPalindrome(String s) {
        // Initialize a set to keep track of characters with odd frequencies
        HashSet<Character> charSet = new HashSet<>();
        // Initialize the length of the longest palindrome
        int length = 0;
        
        // Iterate over each character in the string
        for (char c : s.toCharArray()) {
            // If the character is already in the set, remove it and increase the length by 2
            if (charSet.contains(c)) {
                charSet.remove(c);
                length += 2;
            } else {
                // If the character is not in the set, add it to the set
                charSet.add(c);
            }
        }
        
        // If there are any characters left in the set, add 1 to the length for the middle character
        if (!charSet.isEmpty()) {
            length += 1;
        }
        
        // Return the total length of the longest palindrome
        return length;
    }


// 5. 1002. Find Common Characters.
 public List<String> commonChars(String[] words) {
                HashMap<Character, Integer> map = new HashMap<>();
        for(char ch : words[0].toCharArray()){
            map.put(ch,map.getOrDefault(ch,0) + 1);
        }
//        System.out.println(map);



        for(int i = 1; i < words.length; i++){
            HashMap<Character, Integer> map2 = new HashMap<>();
            for(char ch : words[i].toCharArray()){
                map2.put(ch, map2.getOrDefault(ch, 0) + 1);
            }
//            System.out.println(map2);

            for(Character keys : map.keySet()){
                if(map2.containsKey(keys) && map.get(keys) > 0){
                    map.put(keys, Math.min(map.get(keys), map2.get(keys)));
                }else{
                    map.put(keys,0);
                }
            }
//            System.out.println(map);
        }

        List<String> result = new ArrayList<>();
        for(Character ch : map.keySet()){
            if(map.get(ch) > 0){
                for(int i = 0; i < map.get(ch); i++){
                    result.add(ch + "");
                }
            }
        }

//        System.out.println(result);
        return result;
    }


// 6. 846. Hand of Straights.
public boolean findsucessors(int[] hand, int groupSize, int i, int n) {
        int f = hand[i] + 1;
        hand[i] = -1;
        int count = 1;
        i += 1;
        while (i < n && count < groupSize) {
            if (hand[i] == f) {
                f = hand[i] + 1;
                hand[i] = -1;
                count++;
            }
            i++;
        }
        if (count != groupSize)
            return false;
        else
            return true;
    }

    public boolean isNStraightHand(int[] hand, int groupSize) {
        int n = hand.length;
        if (n % groupSize != 0)
            return false;
        Arrays.sort(hand);
        int i = 0;
        for (; i < n; i++) {
            if (hand[i] >= 0) {
                if (!findsucessors(hand, groupSize, i, n))
                    return false;
            }
        }
        return true;
    }


// 7. 648. Replace Words.
Trie root;
    public String replaceWords(List<String> dictionary, String sentence) {
        root = new Trie();
        for(String word : dictionary){
            insert(word);
        }
        StringBuilder result = new StringBuilder();
        String []  input = sentence.split(" ");
        for(String i : input){
            result.append(search(i));
            result.append(" ");
        }
        return result.toString().trim();
    }
    public String search(String word){
        Trie node = root;
        int j = 0;
        for(char c : word.toCharArray()){
            int i = c - 'a';
            j++;
            if(node.children[i] == null){
                return word;
            }else if(node.children[i].isEnd){
                return word.substring(0, j);
            }else{
                node = node.children[i];
            }
            
        }
        return word;

    }
    public void insert(String word){
        Trie node = root;
        for(char c: word.toCharArray()){
            int i = c - 'a';
            if(node.children[i] == null){
                node.children[i] = new Trie();
            }
            node = node.children[i];
        }
        node.isEnd = true;
    }
}
class Trie{
    Trie [] children;
    boolean isEnd;
    public Trie(){
        children = new Trie[26];
        isEnd =false;
    }



// 8. 523. Continuous Subarray Sum.
 public boolean checkSubarraySum(int[] nums, int k) {
        int n = nums.length;
        
        // Step 1: Iterate Through Starting Points
        for (int start = 0; start < n - 1; start++) {
            // Step 2: Expand the Subarray
            for (int end = start + 1; end < n; end++) {
                // Step 3: Calculate the Sum
                int subarraySum = 0;
                for (int i = start; i <= end; i++) {
                    subarraySum += nums[i];
                }
                
                // Step 4: Check if the Sum is a Multiple of k
                if (subarraySum == 0 && k == 0) { // Handling special case where k is 0
                    return true;
                }
                if (k != 0 && subarraySum % k == 0) {
                    return true;
                }
            }
        }
        
        // Step 5: Return the Result
        return false;
    }



class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        int prefix_sum=0;
        int count=0;
        for(int i=0; i<nums.length; i++){
            prefix_sum+=nums[i];
            int rem=prefix_sum % k;
            if(rem<0){
                rem=(rem+k);
            }
            if(map.containsKey(rem)){
                count+=map.get(rem);
                map.put(rem,map.get(rem)+1);
            }else{
                map.put(rem,1);
            }

        }
        return count;
    }
}


// 10. 1051. Height Checker.
 public int heightChecker(int[] heights) {
        int[] expected = heights.clone();
        Arrays.sort(expected);
        int count = 0;
        for (int i = 0; i < heights.length; i++) {
            if (heights[i] != expected[i])
                count++;
        }
        return count;
    }


// 11. 1122. Relative Sort Array.
   private int rank(HashMap<Integer, Integer> map, int a) {
        return map.containsKey(a) ? map.get(a) : map.size();
    }
    
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr2.length; i++) {
            map.put(arr2[i], i);
        }

        List<Integer> arr1List = Arrays.stream(arr1).boxed().collect(Collectors.toList());
        arr1List.sort(new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                int rankA = rank(map, a);
                int rankB = rank(map, b);
                return rankA == rankB ? a.compareTo(b) : Integer.compare(rankA, rankB);
            }
        });
        
        return arr1List.stream().mapToInt(Integer::intValue).toArray();
    }



// 12. 75. Sort Colors.
  public void sortColors(int[] nums) {
        int zeros = 0, ones = 0, n = nums.length;
        for(int num : nums) {
            if(num == 0) zeros++;
            else if(num == 1) ones++;
        }  

        for(int i = 0; i < zeros; ++i) {
            nums[i] = 0;
        }

        for(int i = zeros; i < zeros + ones; ++i) {
            nums[i] = 1;
        }

        for(int i = zeros + ones; i < n; ++i) {
            nums[i] = 2;
        }
    }


// 13. 2037. Minimum Number of Moves to Seat Everyone.
public int minMovesToSeat(int[] seats, int[] students) {
        Arrays.sort(seats);
        Arrays.sort(students);
        int n=seats.length;
        int sum=0;
        for(int i=0;i<n;i++){
            sum += Math.abs(seats[i]-students[i]);
        }
        return sum;
    }
