// 1. Print till nth number.
    public static void printN(int n){
        if(n == 10){
            System.out.println(n);
            return;
        }
        System.out.println(n);
        printN(n + 1);
    }


 // 2. Find the nth fibonacci Number.
    public static int fibonacciNumber(int n){
        if(n == 1){
            return 1;
        }
        if(n == 0){
            return 0;
        }
        return fibonacciNumber(n - 1) + fibonacciNumber(n - 2);
    }


// 3. Write the program for binary search.
    public static int binarySearch(int[] arr, int start, int end, int target){
        int mid = start + (end - start) / 2;
        if(target == arr[mid]){
            return mid;
        }
        if(start > end){
            return -1;
        }

        if(arr[mid] > target){
            return binarySearch(arr, start, mid - 1, target);
        }

        return binarySearch(arr, mid + 1, end, target);

    }


// 4. Print from 1 to n.
    public static void print(int n){
        if(n == 0){
            return;
        }
        print(n - 1);
        System.out.println(n);
    }

   // 5. Print from 1 to n and n to 1.
    public static void both(int n){
        if(n == 0){
            return;
        }
        System.out.println(n);
        both(n - 1);
        System.out.println(n);
    }


 // 6. Factorial of a number.
    public static int factorial(int n){
        int product = 1;
        if(n == 1){
            return 1;
        }

        product = n * factorial(n - 1);

        return product;
    }

    // 7. Sum of n number.
    public static int sum(int n){
        if(n == 1){
            return 1;
        }
        return n + sum(n - 1);
    }

// 8. Sum of Digits.
    public static int sumOfDigits(int n){
        if(n  == 0){
            return 0;
        }

        return ( n % 10) + sumOfDigits(n / 10);
    }



   // 9. Product of a number.
    public static int multiple(int n){
        if(n % 10 == 0){
            return 1;
        }

        return (n % 10) * multiple(n / 10);
    }

    // 10. Reverse a number.
    static int sum = 0;
    public static void reverse(int n){
        if(n == 0){
            return;
        }

        int remainder = n % 10;
        sum = sum * 10 + remainder;

        reverse(n / 10);
    }

    // 11. Reverse a number II.
    public static int reverseII(int n){
        int digits = (int)(Math.log10(n)) + 1;
        return helper(n, digits);
    }
    public static int helper(int n, int digits){
        if(n % 10 == n){
            return n;
        }
        int remainder = n % 10;

        return  remainder * (int)(Math.pow(10, digits - 1)) + helper(n / 10 , digits - 1);
    }

// 12. Palindrome or not.
    public static boolean palindrome(int n){
        return n == reverseII(n);
    }

 // 13. Count number of zeroes.
    public static int countZeroes(int n){
        return helper1(n, 0);
    }
    public static int helper1(int n, int count){
        if(n == 0){
            return count;
        }
        int remainder = n % 10;
        if(remainder == 0){
            return helper1(n / 10, count + 1);
        }
        return helper1(n / 10, count);
    }

// 14. 1342. Number of Steps to Reduce a Number to Zero.

    public static int numberOfSteps(int num) {
        return helper3(num, 0);
    }
    public static int helper3(int num , int steps){
        if(num == 0){
            return steps;
        }
        if(num % 2 == 0){
            return helper3(num / 2, steps + 1);
        }
        return helper3(num - 1, steps + 1);
    }


 // 15. Find if array is sorted or not.
    public static boolean isSorted(int[] arr, int i){
        if(i == arr.length - 1){
            return true;
        }
        return arr[i] < arr[i + 1] && isSorted(arr, i + 1);
    }
