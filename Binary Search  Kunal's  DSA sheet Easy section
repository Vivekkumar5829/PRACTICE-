// 1. 69. Sqrt(x).
    public static int sqrt(int x){
       long start = 0;
       long end = x/2;
       int ans = 0;

       while (start <= end){
           long mid = start + (end - start)/2;
           if(mid * mid == x){
               ans = (int) mid;
               break;
           } else if (mid * mid < x) {
               start = mid + 1;
               ans = (int) mid;
           }else{
               end = mid - 1;
           }
       }

       return (int) ans;
    }



// 2. Find the exact square root of a given number.
    public static float exactSqrt(int x){
        int start = 0;
        int end = x/2;
        float ans = 0.0f;

        while (start <= end){
            int mid = start + (end - start)/2;
            if(mid * mid == x){
                ans = mid;
                break;
            } else if (mid * mid < x) {
                start = mid + 1;
                ans = mid;
            }else{
                end = mid - 1;
            }
        }
        float increment = 0.1f;
        for(int i = 0; i < x/2; i++){
            while ( ans * ans <= x){
                ans += increment;
            }
            ans = ans - increment;
            increment = increment / 10;
        }
        return ans;
    }


// 3. 374. Guess Number Higher or Lower
//    public int guessNumber(int n) {
//        int start = 0;
//        int end = n;
//        while(start <= end){
//            int mid = start + (end - start)/2;
//            if(guess(mid) == 0){
//                return mid;
//            }else if(guess(mid) == 1){
//                start = mid + 1;
//            }else{
//                end = mid - 1;
//            }
//        }
//        return -1;
//    }



// 4. 278. First Bad Version.
//    public int firstBadVersion(int n) {
//        int start = 1;
//        int end = n;
//        int possible = 0;
//
//        while(start <= end){
//            int mid = start + (end - start)/2;
//            if(isBadVersion(mid)){
//                possible = mid;
//                end = mid - 1;
//            }else{
//                start = mid + 1;
//            }
//        }
//        return possible;
//    }


// 5. 167. Two Sum II - Input Array Is Sorted.
        public static int[] twoSum(int[] numbers, int target) {
            int start = 0;
            int end = numbers.length - 1;
            while(start <= end){
                int sum = numbers[start] + numbers[end];
                if(sum == target){
                    return new int[]{start + 1, end + 1};
                }else if(sum > target){
                    end--;
                }else{
                    start++;
                }
            }
            return new int[]{-1,-1};
    }



// 6. 367. Valid Perfect Square.
    public static boolean isPerfectSquare(int num) {
        long start = 1;
        long end = num;
        while(start <= end){
            long mid = start + (end - start)/2;
            if(mid * mid == num){
                return true;
            }else if(mid * mid > num){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return false;
    }



// 7. Valid Perfect Square.
    public static int isPerfectSquare2(int num) {
        long start = 1;
        long end = num;
        while(start <= end){
            long mid = start + (end - start)/2;
            if(mid * mid == num){
                return (int) mid;
            }else if(mid * mid > num){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return -1;
    }


// 8. 441. Arranging Coins.
    public static int arrangeCoins(int n){
        long start = 1;
        long end = n;
        while (start <= end){
             long mid = start + (end - start)/2;
            long total = (mid * (mid + 1))/2;
            if(total == n){
                return (int) mid;
            }else if(total > n){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return (int) end;
    }

// 9. 744. Find Smallest Letter Greater Than Target.
    public static char nextGreatestLetter(char[] letters, char target) {
        int start = 0;
        int end = letters.length - 1;
        while(start <= end){
        int mid = start + (end - start)/2;
        if(letters[mid] > target){
            end = mid - 1;
        }else{
            start = mid + 1;
        }
    }
    return letters[start % letters.length];
}


// 10. 704. Binary Search.
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] < target){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }
        return - 1;
    }


// 11. 35. Search Insert Position.
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] > target){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return start;
    }



 // 12. 852. Peak Index in a Mountain Array.
    public static int peakIndexInMountainArray(int[] arr){
        int start = 0;
        int end = arr.length - 1;
        while (start < end){
            int mid = start + (end - start)/2;
            if(arr[mid] > arr[mid + 1]){
                end = mid;
            }else {
                start = mid + 1;
            }
        }
        return start;
    }



// 13. 349. Intersection of Two Arrays.
    public static int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set = new HashSet<Integer>();
        for(int i : nums1){
            set.add(i);
        }
        HashSet<Integer> intersection = new HashSet<Integer>();
        for(int i : nums2){
            if(set.contains(i)){
                intersection.add(i);
            }
        }
        int[] result = new int[intersection.size()];
        int index = 0;
        for(int i : intersection){
            result[index++] = i;
        }
        return result;

    }


// 14. 350. Intersection of Two Arrays II.
    public static int[] intersect(int[] nums1, int[] nums2) {
        int i = 0;
        int j = 0;
        int k = 0;
        int[] ans = new int[nums1.length * nums2.length];
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        while (i < nums1.length && j < nums2.length){
            if(nums1[i] < nums2[j]){
                i++;
            }else if(nums1[i] > nums2[j]){
                j++;
            }else{
                ans[k++] = nums1[i++];
                j++;
            }
        }
        return Arrays.copyOfRange(ans,0,k);
    }
