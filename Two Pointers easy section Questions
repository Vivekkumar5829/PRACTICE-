
        // 1. Given sorted array, find the number of pairs which has a sum or difference is equal to k.
        public static int sumpairs(int[] arr, int k) {
            int start = 0;
            int end = arr.length - 1;
            int ans = 0;
            while (start < end) {
                if (arr[start] + arr[end] > k) {
                    end--;
                } else if (arr[start] + arr[end] < k) {
                    start++;
                } else {
                    if(arr[start] == arr[end]){
                        int n = (end - start);
                        ans += (n *(n+1)/2);
                        return ans;
                    }

                    if (arr[start] != arr[end]) {
                        int c1 = 0;
                        int c2 = 0;
                        int left = arr[start];
                        int right = arr[end];
                        while (left == arr[start]) {
                            c1++;
                            start++;
                        }
                        while (right == arr[end]) {
                            c2++;
                            end--;
                        }
                        ans += (c1 * c2);
                    }
                }

            }
            return ans;
        }

  // 2. 2824. Count Pairs Whose Sum is Less than Target.

    public static int countPairs(List<Integer> nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        int count = 0;
        Collections.sort(nums);

        while (start < end){
            if(nums.get(start) + nums.get(end) < target){
                count += end - start;
                start++;
            } else {
                end--;
            }
        }
        return count;
    }


   // 3. 2367. Number of Arithmetic Triplets.
    public int arithmeticTriplets(int[] nums, int diff) {
        Set<Integer> hst = new HashSet();
        for(int num: nums)
            hst.add(num);


        int i=0,j=1;
        int count=0;
        while(i<=j && j<nums.length){

            if(nums[j]-nums[i] < diff)
                j++;
            else if(nums[j]-nums[i]>diff)
                i++;
            else{
                if(hst.contains(nums[j]+diff)){
                    count++;
                }
                i++;
                j++;
            }
        }

        return count;
    }
