    // 1. Kth smallest element.
    public static int kthSmallest(int[] num, int k){
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b - a);
        for (int j : num) {
            maxHeap.offer(j);

            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
        }

        return maxHeap.peek();

    }


// 2. Return the K largest element in an array.
    public static  int[] kLargest(int[] arr , int k){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int i = 0; i < arr.length; i++){
            minHeap.offer(arr[i]);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }

        int[] result = new int[k];
        int index = 0;
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.poll();
        }

        return result;
    }


 // 3. Sort a K sorted Array or Nearly Sorted Array.
    public static int[] kSorted(int[] arr, int k){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int[] result = new int[arr.length];
        int index = 0;
        for(int i = 0; i < arr.length; i++){
            minHeap.offer(arr[i]);
            if(minHeap.size() > k){
                result[index++] = minHeap.poll();
            }
        }
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.poll();
        }
        return result;
    }


// 4. K the closest Number or 658. Find K Closest Elements.
      static class  Pair {
        int diff, val;

        public Pair(int diff, int val) {
            this.diff = diff;
            this.val = val;
        }
    }
        public static List<Integer> kClosest(int[] arr, int k, int x) {

            List<Integer> result = new ArrayList<>();

            PriorityQueue<Pair> pq = new PriorityQueue<>(new Comparator<Pair>() {
                public int compare(Pair p1, Pair p2) {
                    if (p2.diff == p1.diff) return p2.val - p1.val;
                    return p2.diff - p1.diff;
                }
            });

            for(int i = 0; i < arr.length; i++){
                pq.add(new Pair(Math.abs(arr[i] - x) , arr[i]));
                if(pq.size() > k){
                    pq.poll();
                }
            }

            while (!pq.isEmpty()){
                result.add(pq.poll().val);
            }


            Collections.sort(result);
            return result;

        }
 or 
public static List<Integer> kClosest(int[] arr, int k, int x) {

            PriorityQueue<Pair<Integer,Integer>> pq=new PriorityQueue<>((a,b)-> b.getKey()!=a.getKey()?b.getKey()-a.getKey():b.getValue()-a.getValue());
            for(int i=0;i<arr.length;i++){
                pq.add(new Pair <>(Math.abs(x-arr[i]),arr[i]));
            }
            while(pq.size()>k){
                pq.remove();
            }
            List<Integer> list=new ArrayList<>();
            while(!pq.isEmpty()){
                list.add(pq.remove().getValue());
            }
            Collections.sort(list);
            return list;

        }
