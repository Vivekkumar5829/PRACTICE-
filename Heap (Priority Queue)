    // 1. Kth smallest element.
    public static int kthSmallest(int[] num, int k){
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b - a);
        for (int j : num) {
            maxHeap.offer(j);

            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
        }

        return maxHeap.peek();

    }


// 2. Return the K largest element in an array.
    public static  int[] kLargest(int[] arr , int k){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int i = 0; i < arr.length; i++){
            minHeap.offer(arr[i]);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }

        int[] result = new int[k];
        int index = 0;
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.poll();
        }

        return result;
    }


 // 3. Sort a K sorted Array or Nearly Sorted Array.
    public static int[] kSorted(int[] arr, int k){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int[] result = new int[arr.length];
        int index = 0;
        for(int i = 0; i < arr.length; i++){
            minHeap.offer(arr[i]);
            if(minHeap.size() > k){
                result[index++] = minHeap.poll();
            }
        }
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.poll();
        }
        return result;
    }


// 4. K the closest Number or 658. Find K Closest Elements.
      static class  Pair {
        int diff, val;

        public Pair(int diff, int val) {
            this.diff = diff;
            this.val = val;
        }
    }
        public static List<Integer> kClosest(int[] arr, int k, int x) {

            List<Integer> result = new ArrayList<>();

            PriorityQueue<Pair> pq = new PriorityQueue<>(new Comparator<Pair>() {
                public int compare(Pair p1, Pair p2) {
                    if (p2.diff == p1.diff) return p2.val - p1.val;
                    return p2.diff - p1.diff;
                }
            });

            for(int i = 0; i < arr.length; i++){
                pq.add(new Pair(Math.abs(arr[i] - x) , arr[i]));
                if(pq.size() > k){
                    pq.poll();
                }
            }

            while (!pq.isEmpty()){
                result.add(pq.poll().val);
            }


            Collections.sort(result);
            return result;

        }
 or 
public static List<Integer> kClosest(int[] arr, int k, int x) {

            PriorityQueue<Pair<Integer,Integer>> pq=new PriorityQueue<>((a,b)-> b.getKey()!=a.getKey()?b.getKey()-a.getKey():b.getValue()-a.getValue());
            for(int i=0;i<arr.length;i++){
                pq.add(new Pair <>(Math.abs(x-arr[i]),arr[i]));
            }
            while(pq.size()>k){
                pq.remove();
            }
            List<Integer> list=new ArrayList<>();
            while(!pq.isEmpty()){
                list.add(pq.remove().getValue());
            }
            Collections.sort(list);
            return list;

        }


 // 5. Top K frequent Numbers or 347. Top K Frequent Elements.
    public static int[] topKFrequent(int[] nums, int k){
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : nums){
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));

//        PriorityQueue<Map.Entry<Integer, Integer>> minHeap =
//                new PriorityQueue<>((a,b) -> Integer.compare(a.getValue(), b.getValue()));
//
//        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap =
//                new PriorityQueue<>((a,b) -> (b.getValue() - a.getValue()));

        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            minHeap.add(entry);
            System.out.println(minHeap);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }

        int[] result = new int[k];
        int index = 0;
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.remove().getKey();
        }

        Arrays.sort(result);
        return result;
    }


 // 6. 692. Top K Frequent Words
    static class Pair{
        String str;
        int freq;
        Pair(String str, int freq){
            this.str = str;
            this.freq = freq;
        }
    }

    public static List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> map = new HashMap<>();
        for(String str : words){
            map.put(str, map.getOrDefault(str, 0) + 1);
        }

        System.out.println(map);
        PriorityQueue<Pair> minHeap = new PriorityQueue<>(new Comparator<Pair>() {
            @Override
            public int compare(Pair a, Pair b) {
               if(a.freq == b.freq){
                   return a.str.compareTo(b.str);
               }
               return b.freq - a.freq;
            }
        });

        for (Map.Entry<String , Integer> entry : map.entrySet()){
            minHeap.offer(new Pair(entry.getKey(), entry.getValue()));

        }
        List<String> result = new ArrayList<>();
        while (!minHeap.isEmpty() && k > 0){
            result.add(minHeap.remove().str);
            k--;
        }


        return result;
    }

// 7. Frequency Sort.
    public static int[] frequencySort(int[] arr){
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : arr){
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap =
                new PriorityQueue<>((a,b) -> (b.getValue() - a.getValue()));
        System.out.println(map);
        for (Map.Entry<Integer, Integer> entry : map.entrySet()){
            maxHeap.add(entry);
        }

        int[] result = new int[arr.length];
        int index = 0;

        while (!maxHeap.isEmpty()){
            int val = maxHeap.peek().getKey();
            int freq = maxHeap.peek().getValue();

            while (freq > 0){
                result[index++] = val;
                freq--;
            }
            maxHeap.poll();

        }
        return result;
    }



    // 8. 451. Sort Characters By Frequency.
    public static String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(char ch : s.toCharArray()){
            map.put(ch, map.getOrDefault(ch , 0) + 1);
        }

        PriorityQueue<Map.Entry<Character, Integer>> maxHeap = new PriorityQueue<>((a, b) -> (b.getValue() - a.getValue()));

        for(Map.Entry<Character,Integer> entry : map.entrySet()){
            maxHeap.add(entry);
        }

        StringBuilder sb = new StringBuilder();

        while (!maxHeap.isEmpty()){
            Character ch = maxHeap.peek().getKey();
            int freq = maxHeap.peek().getValue();

            while (freq > 0){
                sb.append(ch);
                freq--;
            }
            maxHeap.poll();
        }

        return sb.toString();
    }


    // 9. 2974. Minimum Number Game.
    public static int[] numberGame(int[] nums) {
       PriorityQueue<Integer> minHeap = new PriorityQueue<>();
       for(int i : nums){
           minHeap.add(i);
       }

       int[] result = new int[nums.length];
       int index = 0;
       while (minHeap.size() >= 2){
           int alice = minHeap.poll();
           int bob = minHeap.poll();

           result[index++] = bob;
           result[index++] = alice;
       }

       while (!minHeap.isEmpty()){
           result[index++] = minHeap.poll();
       }

       return result;
    }


// 10. 2558. Take Gifts From the Richest Pile.
    public static long pickGifts(int[] gifts, int k) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b - a);

        for(int i : gifts){
            maxHeap.offer(i);
        }
        for(int i = 0; i < k; i++) {
            if(!maxHeap.isEmpty()) {
                int val = (int) Math.sqrt(maxHeap.poll());
                maxHeap.offer(val);
            }
        }

        long maxGifts = 0;
        for(int i : maxHeap){
            maxGifts += i;
        }

        return maxGifts;
    }
