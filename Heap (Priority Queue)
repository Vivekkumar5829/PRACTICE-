    // 1. Kth smallest element.
    public static int kthSmallest(int[] num, int k){
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b - a);
        for (int j : num) {
            maxHeap.offer(j);

            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
        }

        return maxHeap.peek();

    }


// 2. Return the K largest element in an array.
    public static  int[] kLargest(int[] arr , int k){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int i = 0; i < arr.length; i++){
            minHeap.offer(arr[i]);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }

        int[] result = new int[k];
        int index = 0;
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.poll();
        }

        return result;
    }


 // 3. Sort a K sorted Array or Nearly Sorted Array.
    public static int[] kSorted(int[] arr, int k){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int[] result = new int[arr.length];
        int index = 0;
        for(int i = 0; i < arr.length; i++){
            minHeap.offer(arr[i]);
            if(minHeap.size() > k){
                result[index++] = minHeap.poll();
            }
        }
        while (!minHeap.isEmpty()){
            result[index++] = minHeap.poll();
        }
        return result;
    }
