    // 1. 1281. Subtract the Product and Sum of Digits of an Integer.
    public static int subtractProductAndSum(int n) {
        int sum = 0;
        int product = 1;
        while (n > 0){
            int remainder = n % 10;
            n /= 10;
            sum += remainder;
            product *= remainder;


        }
        return product - sum;
    }


    // 2. 2160. Minimum Sum of Four Digit Number After Splitting Digits.
    public static int minimumSum(int num) {
        int[] split = new int[4];
        for(int i = 0; i < 4; i++){
            split[i] = num % 10;
            num /= 10;
        }
        Arrays.sort(split);
//        System.out.println(Arrays.toString(split));
        int num1 = split[0] * 10 + split[2];
        int num2 = split[1] * 10 + split[3];


        return num1 + num2;
    }

 // 3.  1688. Count of Matches in Tournament.
    public static int numberOfMatches(int n) {
        int matches = 0;
        while (n != 1){
            if(n % 2 == 0){
                matches += n / 2;
                n /= 2;
            }else{
                matches += (n - 1) / 2;
                n = ((n - 1) / 2) + 1;
            }
        }
        return matches;
    }


    // 4. 2520. Count the Digits That Divide a Number.
    public static int countDigits(int num) {
        int ans = 0;
        int temp = num;
        while (temp > 0){
            int lastDigit = temp % 10;
            if(num % lastDigit == 0){
                ans++;
            }
            temp /= 10;
        }
        return ans;
    }


    // 5. 2535. Difference Between Element Sum and Digit Sum of an Array.
    public static int differenceOfSum(int[] nums) {
        int sum1 = 0;
        int sum2 = 0;

        for(int i = 0; i < nums.length; i++){
            sum1 += nums[i];

            if(nums[i] > 9) {
                while (nums[i] > 0) {
                    int remainder = nums[i] % 10;
                    sum2 += remainder;
                    nums[i] /= 10;

                }
            }else{
                sum2 += nums[i];
            }
        }


        return Math.abs(sum1 - sum2);

    }


    // 6.1588. Sum of All Odd Length Subarrays.
    public static int sumOddLengthSubarrays(int[] arr) {
        int sum = 0;
          for(int i = 0; i < arr.length; i++){
              for(int j = i; j < arr.length; j++){
                  ArrayList<Integer> lst = new ArrayList<>();
                  for (int k = i; k <= j; k++){
                      lst.add(arr[k]);
                  }
                  if(lst.size() % 2 != 0){
                     sum += justSum(lst);
                  }
              }
          }


          return sum;
    }
    private static int justSum(ArrayList<Integer> lst){
        int sum = 0;
        for(int i : lst){
            sum+= i;
        }
        return sum;
    }


// 7. 1323. Maximum 69 Number.
    public static int maximum69Number (int num) {
        char[] ch = String.valueOf(num).toCharArray();

        for(int i = 0; i < ch.length; i++){
            if(ch[i] == '6'){
                ch[i] = '9';
                break;
            }
        }
        return Integer.parseInt(new String(ch));
    }


    // 8.2485. Find the Pivot Integer.
    public static int pivotInteger(int n) {
        int sum=(n*(n+1))/2;
        int sumr=0;
        for(int i=1;i<=n;i++){
            sumr=sumr+i;
            if(sum-sumr+i==sumr){
                return i;
            }
        }
        return -1;
    }


    // 9. 2119. A Number After a Double Reversal.
    public static boolean isSameAfterReversals(int num) {
//        int reversed1 = 0;
//        int num1 = num;
//        while (num1 > 0){
//            int remainder = num1 % 10;
//            reversed1 = reversed1 * 10 + remainder;
//            num1 = num1 / 10;
//        }
//        System.out.println(reversed1);
//
//        int reversed2 = 0;
//        while (reversed1 > 0){
//            int remainder = reversed1 % 10;
//            reversed2 = reversed2 * 10 + remainder;
//            reversed1 /= 10;
//        }
//
//        System.out.println(reversed2);
//        return num == reversed2;


        int num1 = num;
        int reverse1 = 0;
        while (num1 > 0){
            int remainder = num1 % 10;
            reverse1 = reverse1 * 10 + remainder;
            num1 /= 10;
        }

        String str1 = String.valueOf(num);
        String str2 = String.valueOf(reverse1);

        return str1.length() == str2.length();
    }


// 10. 2427. Number of Common Factors.
    public static int commonFactors(int a, int b) {

//        List<Integer> lst = new ArrayList<>();
//        int min = Math.min(a, b);
//        for(int i = 1; i <= min; i++) {
//            if (a % i == 0) {
//                lst.add(i);
//            }
//        }
//
////        System.out.println(lst);
//        int count = 0;
//
//        for(int i = 1; i <= min; i++){
//            if(lst.contains(i) && b % i == 0){
//                count++;
//            }
//        }
//        return count;
        int count = 0;
        int min = Math.min(a, b);
        for(int i = 1; i <= min; i++){
            if(a % i == 0 && b % i == 0){
                count++;
            }
        }
        return count;
    }


// 11. 2651. Calculate Delayed Arrival Time.
    public static int findDelayedArrivalTime(int arrivalTime, int delayedTime) {
        int totaltime = arrivalTime + delayedTime;
        return  totaltime % 24;
    }


    // 12. 728. Self Dividing Numbers.
    public static List<Integer> selfDividingNumbers(int left, int right) {

        List<Integer> lst = new ArrayList<>();
        for(int i = left; i <= right; i++){
            if(selfDivisble(i)){
                lst.add(i);
            }
        }
        return lst;
    }

    public static boolean selfDivisble(int i){
        int n = i;

        while (n > 0){
            int remainder = n % 10;
            n = n / 10;
            if(remainder == 0){
                return false;
            }
            if(i % remainder != 0){
                return false;
            }
        }
        return true;
    }


    // 13. 1979. Find Greatest Common Divisor of Array.
    public static int findGCD(int[] nums) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;

        for(int i : nums){
            if(i > max){
                max = i;
            }
            if(i < min){
                min = i;
            }
        }
        for(int i = min; i >= 1; i--){
            if(min % i == 0 && max % i == 0){
                return i;
            }
        }
        return -1;
    }


//    14. 1837. Sum of Digits in Base K.
    public static int sumBase(int n, int k) {
    int sum = 0;
    while(n > 0){
        sum += n % k;
        n = n / k;
    }
    return sum;
    }



    // 15. 1716. Calculate Money in Leetcode Bank.
    public static int totalMoney(int n) {
        int totalMoney = 0;
        int increment = 1;
        int after7thDay = 2;
        for(int i = 1; i <= n; i++){
            totalMoney += increment;
            increment++;
            if(i % 7 == 0){
                increment = after7thDay;
                after7thDay++;
            }
        }

        return totalMoney;

    }


    // 16. 258. Add Digits.
    public static int addDigits(int num) {
       int sum = 10;
       while (sum >= 10){
           sum = 0;
           while (num > 0){
               sum += num % 10;
               num = num / 10;
           }
           num = sum;
       }
       return sum;
    }


//    17.2180. Count Integers With Even Digit Sum.
    public static int countEven(int num) {
        int result = 0;

        for(int i = 1; i <= num; i++){
            if(isSumEven(i)){
                result++;
            }
        }
        return result;

    }
    public static boolean isSumEven(int i){
        int sum = 0;
        while (i > 0){
            sum += i % 10;
            i /= 10;
        }
        if(sum % 2 == 0){
            return true;
        }
        return false;
    }


    // 18. 1925. Count Square Sum Triples.
    public static int countTriples(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++){
            for(int j = 1; j <= n; j++){
                double sqrt = Math.pow(i,2) + Math.pow(j,2);
                int k = (int) Math.sqrt(sqrt);
                if(k <= n && k * k == sqrt){
                    count++;
                }

            }
        }
        return count;
    }

 // 19. 2544. Alternating Digit Sum.
    public static int alternateDigitSum(int n) {

        String str = String.valueOf(n);
        int flag = 1;

        int sum = 0;
        for(char ch : str.toCharArray()){
            sum += flag * Character.getNumericValue(ch);
            flag *= -1;
        }



        return sum;
    }

//     20. 762. Prime Number of Set Bits in Binary Representation.
    public static int countPrimeSetBits(int left, int right) {
        int result = 0;
       for(int i = left; i <= right; i++){
//           int[] bin = toBinary(i);
           int count = Integer.bitCount(i);
//           for(int j : bin){
//               if(j == 1){
//                   count++;
//               }
//           }

           if(isPrime(count)){
               result++;
           }
       }
       return result;
    }

//    public static int[] toBinary(int n){
//        int[] binary = new int[35];
//        int index = 0;
//
//        while (n > 0){
//            binary[index++] = n % 2;
//            n = n / 2;
//        }
//
//        return binary;
//    }

    public static boolean isPrime(int n){
        if(n == 1){
            return false;
        }
        for(int i = 2; i <= Math.sqrt(n); i++){
            if(n % i == 0){
                return false;
            }
        }
        return true;
    }
