    // 1. 1281. Subtract the Product and Sum of Digits of an Integer.
    public static int subtractProductAndSum(int n) {
        int sum = 0;
        int product = 1;
        while (n > 0){
            int remainder = n % 10;
            n /= 10;
            sum += remainder;
            product *= remainder;


        }
        return product - sum;
    }


    // 2. 2160. Minimum Sum of Four Digit Number After Splitting Digits.
    public static int minimumSum(int num) {
        int[] split = new int[4];
        for(int i = 0; i < 4; i++){
            split[i] = num % 10;
            num /= 10;
        }
        Arrays.sort(split);
//        System.out.println(Arrays.toString(split));
        int num1 = split[0] * 10 + split[2];
        int num2 = split[1] * 10 + split[3];


        return num1 + num2;
    }

 // 3.  1688. Count of Matches in Tournament.
    public static int numberOfMatches(int n) {
        int matches = 0;
        while (n != 1){
            if(n % 2 == 0){
                matches += n / 2;
                n /= 2;
            }else{
                matches += (n - 1) / 2;
                n = ((n - 1) / 2) + 1;
            }
        }
        return matches;
    }


    // 4. 2520. Count the Digits That Divide a Number.
    public static int countDigits(int num) {
        int ans = 0;
        int temp = num;
        while (temp > 0){
            int lastDigit = temp % 10;
            if(num % lastDigit == 0){
                ans++;
            }
            temp /= 10;
        }
        return ans;
    }


    // 5. 2535. Difference Between Element Sum and Digit Sum of an Array.
    public static int differenceOfSum(int[] nums) {
        int sum1 = 0;
        int sum2 = 0;

        for(int i = 0; i < nums.length; i++){
            sum1 += nums[i];

            if(nums[i] > 9) {
                while (nums[i] > 0) {
                    int remainder = nums[i] % 10;
                    sum2 += remainder;
                    nums[i] /= 10;

                }
            }else{
                sum2 += nums[i];
            }
        }


        return Math.abs(sum1 - sum2);

    }


    // 6.1588. Sum of All Odd Length Subarrays.
    public static int sumOddLengthSubarrays(int[] arr) {
        int sum = 0;
          for(int i = 0; i < arr.length; i++){
              for(int j = i; j < arr.length; j++){
                  ArrayList<Integer> lst = new ArrayList<>();
                  for (int k = i; k <= j; k++){
                      lst.add(arr[k]);
                  }
                  if(lst.size() % 2 != 0){
                     sum += justSum(lst);
                  }
              }
          }


          return sum;
    }
    private static int justSum(ArrayList<Integer> lst){
        int sum = 0;
        for(int i : lst){
            sum+= i;
        }
        return sum;
    }


// 7. 1323. Maximum 69 Number.
    public static int maximum69Number (int num) {
        char[] ch = String.valueOf(num).toCharArray();

        for(int i = 0; i < ch.length; i++){
            if(ch[i] == '6'){
                ch[i] = '9';
                break;
            }
        }
        return Integer.parseInt(new String(ch));
    }


    // 8.2485. Find the Pivot Integer.
    public static int pivotInteger(int n) {
        int sum=(n*(n+1))/2;
        int sumr=0;
        for(int i=1;i<=n;i++){
            sumr=sumr+i;
            if(sum-sumr+i==sumr){
                return i;
            }
        }
        return -1;
    }


    // 9. 2119. A Number After a Double Reversal.
    public static boolean isSameAfterReversals(int num) {
//        int reversed1 = 0;
//        int num1 = num;
//        while (num1 > 0){
//            int remainder = num1 % 10;
//            reversed1 = reversed1 * 10 + remainder;
//            num1 = num1 / 10;
//        }
//        System.out.println(reversed1);
//
//        int reversed2 = 0;
//        while (reversed1 > 0){
//            int remainder = reversed1 % 10;
//            reversed2 = reversed2 * 10 + remainder;
//            reversed1 /= 10;
//        }
//
//        System.out.println(reversed2);
//        return num == reversed2;


        int num1 = num;
        int reverse1 = 0;
        while (num1 > 0){
            int remainder = num1 % 10;
            reverse1 = reverse1 * 10 + remainder;
            num1 /= 10;
        }

        String str1 = String.valueOf(num);
        String str2 = String.valueOf(reverse1);

        return str1.length() == str2.length();
    }
