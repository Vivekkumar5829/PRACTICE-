// 1. Check for the existence of element in an array.
    public static boolean exist(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return true;
            }
        }
        return false;
    }


// 2. Check for the existence of an element in an array using recursion.
    public static boolean exist1(int[] arr, int target, int i) {
        if (arr[i] == target) {
            return true;
        }
        return exist1(arr, target, i + 1);
    }



// 3. Check for the character in the string.
    public static boolean searchForChar(String str, char c) {
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == c) {
                return true;
            }
        }
        return false;

    }


// 4. Check for the character in the string using recursion.
    public static boolean searchForChar1(String str, char c) {
        if (str.length() == 0) {
            return false;
        }
        if (str.charAt(0) == c) {
            return true;
        }
        return searchForChar1(str.substring(1), c);
    }


// 5. Check for the character in the range in the string.
    public static int searchInRange(int[] arr, int target, int start, int end) {
        if (arr.length == 0) {
            return -1;
        }
        for (int i = start; i < end; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }


// 6. Find the minimum number in the array.
    public static int min(int[] arr) {
        int min = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }
        return min;
    }


// 7. Search for an element int the array.
    public static int[] searchIn2DArray(int[][] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[]{-1, -1};
    }


 // 8. Find the maximum element in the 2D array.
    public static int maximumIn2DArray(int[][] arr) {
        int max = arr[0][0];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] > max) {
                    max = arr[i][j];
                }
            }
        }
        return max;
    }


// 9. Find the number in the array.
    public static int findNumber(int[] arr) {
        int count = 0;
        for (int i : arr) {
            if (isEvenDigits(i)) {
                count++;
            }
        }
        return count;
    }


//  10. Check for the number contain even number of digits or not.
    public static boolean isEvenDigits(int i) {
        int count = 0;

        if (i == 0) {
            return false;
        }
        if (i < 0) {
            i = i * -1;
        }
        while (i > 0) {
            i = i / 10;
            count++;
        }
        if (count % 2 == 0) {
            return true;
        }
        return false;
    }


// 11. 1672. Richest Customer Wealth.
    public static int maximumWealth(int[][] accounts) {
        int wealth = 0;

        for (int i = 0; i < accounts.length; i++) {
            int sum = 0;
            for (int j = 0; j < accounts[i].length; j++) {
                sum += accounts[i][j];
            }
            if (sum > wealth) {
                wealth = sum;
            }
        }

        return wealth;
    }


 // 12. Implement the binary search.
    public static int binarySearch(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                return mid;
            }
            if (arr[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }


 // 13. Implement order Agnostic Binary Search.
    public static int orderAgnosticBS(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;
        boolean isAscending = arr[start] < arr[end];
        if (isAscending) {
            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (arr[mid] == target) {
                    return mid;
                }
                if (arr[mid] > target) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        } else {
            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (arr[mid] == target) {
                    return mid;
                }
                if (arr[mid] < target) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        }
        return -1;
    }


// 14. 35. Search Insert Position. or Ceiling of a number.
    public static int ceiling(int[] arr, int target){
        ArrayList<Integer> list = new ArrayList<>();
        if(target > arr[arr.length - 1]){
            return -1;
        }
        for(int i = 0; i < arr.length; i++){
            if (arr[i] == target) {
                return arr[i];
            }else if (arr[i] > target) {
                list.add(arr[i]);
            }
        }
        return Collections.min(list);
    }


// 15. Floor of a number.
    public static int floor(int[] arr, int target){
        ArrayList<Integer> list = new ArrayList<>();
        if(target < arr[0]){
            return -1;
        }
        for(int i = 0; i < arr.length; i++){
            if(arr[i] == target){
                return arr[i];
            } else if (arr[i] < target) {
                list.add(arr[i]);
            }
        }
        return Collections.max(list);
    }

 // 16. Ceiling of a number using binary search.
    public static int ceilingBs(int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;
        if(target > arr[end]){
            return -1;
        }
        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] == target){
                return arr[mid];
            }else if(arr[mid] < target){
                start = mid + 1;
            }else {
                end = mid - 1;
            }
        }
        return arr[start];
    }


 // 17. Floor of a number using binary search.
    public static int floorBs(int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;
        if(target < arr[start]){
            return -1;
        }
        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] == target){
                return arr[mid];
            }else if (arr[mid] < target){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }
        return arr[end];
    }

 // 18. Find the next Greatest Character in the array of characters.
    public static char nextGreatestChar(char[] letters, char target){
        int start = 0;
        int end = letters.length - 1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(letters[mid] < target){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }
        return letters[start % letters.length];
    }
// 19. 34. Find First and Last Position of Element in Sorted Array.
    public static int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1};
        ans[0] = search(nums,target,true);
        ans[1] = search(nums,target,false);
        return ans;
    }
    public static int search(int[] nums, int target, boolean findFirstOccurence){
        int ans = -1;
        int start = 0;
        int end = nums.length - 1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(target > nums[mid]){
                start = mid + 1;
            }else if (target < nums[mid]){
                end = mid - 1;
            }else {
                ans = mid;
                if(findFirstOccurence){
                    end = mid -1;
                }else{
                    start = mid + 1;
                }
            }
        }
        return ans;
    }

// 20. Search for the element in the infinity array.
    public static int infinityaAns(int[] arr, int target){
        int start = 0;
        int end = 1;
        while (target > arr[end]){
            int temp  = end + 1;
            end = end + (end - start + 1) * 2;
            start = temp;
        }
        return infinityArr(arr,target,start,end);
    }
    public static int infinityArr(int[] arr, int target, int start, int end){
        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] < target){
                start = mid + 1;
            } else if (arr[mid] > target) {
                end = mid - 1;
            }else{
                return mid;
            }
        }
        return -1;
    }

 // 21.852. Peak Index in a Mountain Array.
    public static int peakIndexInMountainArray(int[] arr) {
        int start = 0;
        int end = arr.length -1;
        while (start < end){
            int mid = start + (end - start)/2;
            if(arr[mid] > arr[mid + 1]){
                end = mid;
            }else{
                start = mid + 1;
            }
        }
        return start;
    }

 // 22. 162. Find Peak Element.
    public static int findPeakElement(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while(start < end){
            int mid = start + (end - start)/2;
            if(nums[mid] > nums[mid + 1]){
                end = mid;
            }else{
                start = mid + 1;
            }
        }
        return start;
    }


// 23. Find in mountain array.
    public static int findInMountainArray(int[] arr, int target) {
        int peak = findPeakElement(arr);
        int firstTry = orderAgnosticBS2(arr,target,0,peak);
        if(firstTry != -1){
            return firstTry;
        }
        return orderAgnosticBS2(arr,target,peak + 1,arr.length - 1);
    }

    public static int orderAgnosticBS2(int[] arr, int target, int start, int end) {
        boolean isAscending = arr[start] < arr[end];
        if (isAscending) {
            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (arr[mid] == target) {
                    return mid;
                }
                if (arr[mid] > target) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        } else {
            while (start <= end) {
                int mid = start + (end - start) / 2;

                if (arr[mid] == target) {
                    return mid;
                }
                if (arr[mid] < target) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        }
        return -1;
    }

// 24. Search int the rotated array.
    public static  int findPivot(int[] arr){
        int start = 0;
        int end = arr.length - 1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(mid < end && arr[mid] > arr[mid + 1]){
                return mid;
            }
            if(mid > start && arr[mid] < arr[mid - 1]){
                return mid - 1;
            }
            if(arr[start] >= arr[mid]){
                end = mid - 1;
            }else{
                start = mid + 1;
            }

        }
        return -1;
    }
    public int search(int[] arr, int target) {
        int pivot = findPivot(arr);
        if(pivot == -1){
            return binarySearch3(arr,target,0,arr.length - 1);
        }
        if(arr[pivot] == target){
            return pivot;
        }
        if(target >= arr[0]){
            return binarySearch3(arr,target,0,pivot - 1);
        }
        return binarySearch3(arr,target,pivot + 1,arr.length - 1);

    }

    public static int binarySearch3(int[] arr, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                return mid;
            }
            if (arr[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }


// 25. Count the number of rotation in the rotated array.
    public static int countNoOfRotation(int[] arr){
        int start = 0;
        int end = arr.length - 1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(mid < end && arr[mid] > arr[mid + 1]){
                return mid + 1;
            }
            if(mid > start && arr[mid] < arr[mid - 1]){
                return mid - 1 + 1;
            }
            if(arr[start] >= arr[mid]){
                end = mid - 1;
            }else{
                start = mid + 1;
            }

        }
        return -1;
    }
    public static int countNoOfRotation2(int[] arr){
        int start = 0;
        int count = 0;
        int end = arr.length - 1;
        while (start < end){
            if(arr[start] > arr[end]){
                count++;

            }
            start++;
        }
        return count;
    }


    // 26. 2089. Find Target Indices After Sorting Array.
    public static List<Integer> targetIndices(int[] nums, int target) {
//        Arrays.sort(nums);
//        List<Integer> result = new ArrayList<>();
//        for(int i = 0; i < nums.length; i++){
//            if(nums[i] == target){
//                result.add(i);
//            }
//        }
//        return result;

        List<Integer> result = new ArrayList<>();
        int smaller = 0;
        int larger = 0;
        for(int i : nums){
            if(i < target){
                smaller++;
            }else if(i > target){
                larger++;
            }
        }
        for(int i = smaller; i <= nums.length - larger - 1; i++){
            result.add(i);
        }
        return result;
    }


 // 27. 1337. The K Weakest Rows in a Matrix.
    public static int[] kWeakestRows(int[][] mat, int k) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < mat.length; i++){
            int count = 0;
            for(int j = 0; j < mat[i].length; j++){
                if(mat[i][j] == 1){
                    count++;
                }
            }
            map.put(i,count);
        }

        List<Integer> lst = new ArrayList<>(map.keySet());


        Collections.sort(lst, (a,b) -> map.get(a) - map.get(b));

        int[] result = new int[k];

        for(int i = 0; i < k; i++){
            result[i] = lst.get(i);
        }
        return result;
    }



    // 28. 2529. Maximum Count of Positive Integer and Negative Integer.
    public static int maximumCount(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while (start < end){
            int mid = start + (end - start)/2;
            if(nums[mid] < 0){
                start = mid + 1;
            }else{
                end = mid;
            }
        }

        int result = nums.length - start;

        int i = start;
        while (i < nums.length && nums[i] == 0){
            result--;
            i++;
        }
        return Math.max(start, result);
    }


// 29. 2540. Minimum Common Value.
    public static int getCommon(int[] nums1, int[] nums2) {
        int matched = 0;
        for(int i = 0; i < nums1.length; i++){
            matched = isEqual(nums1[i], nums2);

            if(matched != -1){
                break;
            }
        }
        return matched;
    }

    private static int isEqual(int target, int[] nums2) {
        int start = 0;
        int end = nums2.length - 1;
        int minResult = -1;

        while (start <= end){
            int mid = start + (end - start)/2;

            if(nums2[mid] == target){
                minResult = nums2[mid];
                return minResult;
            } else if (nums2[mid] > target) {
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return minResult;
    }

// Medium Questions 
// 1. Binary Search 
    public static int binary(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                return mid;
            }else if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }
  

 // 2. Binary Search on Reversed Sorted Array.
    public static int binaryReversed(int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;

        while (start <= end){
            int mid = start + (end - start) / 2;

            if(arr[mid] == target){
                return mid;
            }else if (arr[mid] < target){
                end = mid - 1;
            }else {
                start = mid + 1;
            }
        }
        return -1;
    }
