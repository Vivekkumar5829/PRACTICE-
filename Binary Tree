 // 1. 102. Binary Tree Level Order Traversal.
    public static List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null){
            return result;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for(int i = 0; i < levelSize; i++){
                TreeNode currentNode = queue.poll();
                currentLevel.add(currentNode.val);
                if(currentNode.left != null){
                    queue.offer(currentNode.left);
                }
                if(currentNode.right != null){
                    queue.offer(currentNode.right);
                }
            }
            result.add(currentLevel);
        }
        return result; 
    }


  // 2. 637. Average of Levels in Binary Tree.
    public static List<Double> averageOfLevels(TreeNode root) {
        List<Double> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()){
            int levelSize = queue.size();
            double averageLevel = 0;
            for(int i = 0; i < levelSize; i++){
                TreeNode currentNode = queue.poll();
                averageLevel += currentNode.val;
                if(currentNode.left != null){
                    queue.offer(currentNode.left);
                }
                if(currentNode.right != null){
                    queue.offer(currentNode.right);
                }
            }
            averageLevel = averageLevel / levelSize;
            result.add(averageLevel);
        }
        return result;
    }


 // 3. Level order Successor of a node.
    public static TreeNode findSuccessor(TreeNode root, int key){
        if(root == null){
            return null;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()){
            int levelSize = queue.size();
            TreeNode currentNode = queue.poll();
            if(currentNode.left != null){
                queue.offer(currentNode.left);
            }
            if(currentNode.right != null){
                queue.offer(current.right);
            }
            
            if(currentNode.val == key){
                break;
            }
            
        }
        return queue.peek();
    }



// 4. 103 Binary Tree zigzag level order.
    public List<List<Integer>> zigzagLevelOrder(TreeNode root){
        List<List<Integer>> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Deque<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        boolean reverse = false;

        while (!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for(int i = 0; i < levelSize; i++) {
                if (!reverse) {
                    TreeNode currentNode = queue.pollFirst();
                    currentLevel.add(currentNode.val);
                    if (currentNode.left != null) {
                        queue.addLast(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        queue.addLast(currentNode.right);
                    }
                } else {
                    TreeNode currentNode = queue.pollLast();
                    currentLevel.add(currentNode.val);
                    if (currentNode.right != null) {
                        queue.addFirst(currentNode.right);
                    }
                    if (currentNode.left != null) {
                        queue.addFirst(currentNode.left);
                    }
                }
            }

                reverse = !reverse;
                result.add(currentLevel);
            }
            return result;
        }


// 5. 107. Binary Tree Level Order Traversal II.
 public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for(int i = 0; i < levelSize; i++){
                TreeNode currentNode = queue.poll();
                currentLevel.add(currentNode.val);
                if(currentNode.left != null){
                    queue.offer(currentNode.left);
                }
                if(currentNode.right != null){
                    queue.offer(currentNode.right);
                }
            }
            result.add(0,currentLevel);
        }
        return result;
    }





    // 5. 116. Populating Next Right Pointers in Each Node.
    public Node connect(Node root) {
        if(root == null){
            return null;
        }
        Node leftmost = root;

        while (leftmost.left != null){
            Node current = leftmost;
            while (current != null){
                current.left.next = current.right;

                if(current.next != null){
                    current.right.next = current.next.left;
                }
                current = current.next;
            }
            leftmost = leftmost.left;
        }
        return root;
    }


// 6. 199. Binary Tree Right Side View.
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> result = new ArrayList<>();

            if (root == null) {
                return result;
            }

            Queue<TreeNode> queue = new LinkedList<>();
            queue.offer(root);

            while (!queue.isEmpty()) {
                int levelSize = queue.size();

                for (int i=0; i < levelSize; i++) {
                    TreeNode currentNode = queue.poll();

                    if (i == levelSize - 1) {
                        result.add(currentNode.val);
                    }

                    if (currentNode.left != null) {
                        queue.offer(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        queue.offer(currentNode.right);
                    }
                }
            }
            return result;


        }


 // 7. 101. Symmetric Tree.
    public boolean isSymmetric(TreeNode root){
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);

        while (!queue.isEmpty()){
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();

            if(left == null && right == null){
                continue;
            }
            if(left == null || right == null){
                return false;
            }
            if(left.val != right.val){
                return false;
            }
            queue.add(left.left);
            queue.add(right.right);
            queue.add(left.right);
            queue.add(right.left);

        }
        return true;
    }




// 27/03
// 1. 938. Range Sum of BST.
    public static int rangeSumBST(TreeNode root, int low, int high) {

        if(root == null){
            return 0;
        }

        Stack<TreeNode> stk = new Stack<>();
        stk.push(root);

        int sum = 0;
        while (!stk.isEmpty()){
            TreeNode current = stk.pop();
            if(current.val >= low && current.val <= high){
                sum += current.val;
            }

            if(current.left != null){
                stk.push(current.left);
            }
            if(current.right != null){
                stk.push(current.right);
            }
        }
        return sum;

    }


    // 2. 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        Stack<TreeNode> stk = new Stack<>();
        stk.push(cloned);
        TreeNode ans = target;

        while (!stk.isEmpty()){
            TreeNode current = stk.pop();
            if(current.val == target.val){
                ans = current;
            }
            if(current.left != null){
                stk.push(current.left);
            }
            if(current.right != null){
                stk.push(current.right);
            }
        }

        return ans;
    }

    // 3. 617. Merge Two Binary Trees.
    public static TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1 == null){
            return root2;
        }
        if(root2 == null){
            return root1;
        }

        root1.val += root2.val;

        root1.left = mergeTrees(root1.left, root2.left);
        root1.right = mergeTrees(root1.right, root2.right);

        return root1;
    }



    // 4. 897. Increasing Order Search Tree.
    TreeNode dummy = new TreeNode();
    TreeNode dummyRoot = dummy;

    public TreeNode increasingBST(TreeNode root) {
        inOrder(root);
        return dummyRoot.right;
    }

    void inOrder(TreeNode node){
        if(node == null){
            return;
        }
        inOrder(node.left);
        dummy.right = new TreeNode(node.val);
        dummy = dummy.right;
        inOrder(node.right);
    }

    // 5. 590. N-ary Tree Postorder Traversal.
//    public List<Integer> postorder(Node root) {
//        ArrayList<Integer> List = new ArrayList<>();
//        return helper(root, List);
//    }
//    public List<Integer> helper(Node root , ArrayList<Integer> List){
//        if(root == null){
//            return List;
//        }
//        for(Node child : root.children){
//            helper(child, List);
//        }
//        List.add(root.val);
//
//        return List;
//    }
