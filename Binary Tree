 // 1. 102. Binary Tree Level Order Traversal.
    public static List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null){
            return result;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for(int i = 0; i < levelSize; i++){
                TreeNode currentNode = queue.poll();
                currentLevel.add(currentNode.val);
                if(currentNode.left != null){
                    queue.offer(currentNode.left);
                }
                if(currentNode.right != null){
                    queue.offer(currentNode.right);
                }
            }
            result.add(currentLevel);
        }
        return result; 
    }


  // 2. 637. Average of Levels in Binary Tree.
    public static List<Double> averageOfLevels(TreeNode root) {
        List<Double> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()){
            int levelSize = queue.size();
            double averageLevel = 0;
            for(int i = 0; i < levelSize; i++){
                TreeNode currentNode = queue.poll();
                averageLevel += currentNode.val;
                if(currentNode.left != null){
                    queue.offer(currentNode.left);
                }
                if(currentNode.right != null){
                    queue.offer(currentNode.right);
                }
            }
            averageLevel = averageLevel / levelSize;
            result.add(averageLevel);
        }
        return result;
    }


 // 3. Level order Successor of a node.
    public static TreeNode findSuccessor(TreeNode root, int key){
        if(root == null){
            return null;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()){
            int levelSize = queue.size();
            TreeNode currentNode = queue.poll();
            if(currentNode.left != null){
                queue.offer(currentNode.left);
            }
            if(currentNode.right != null){
                queue.offer(current.right);
            }
            
            if(currentNode.val == key){
                break;
            }
            
        }
        return queue.peek();
    }



// 4. 103 Binary Tree zigzag level order.
    public List<List<Integer>> zigzagLevelOrder(TreeNode root){
        List<List<Integer>> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Deque<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        boolean reverse = false;

        while (!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for(int i = 0; i < levelSize; i++) {
                if (!reverse) {
                    TreeNode currentNode = queue.pollFirst();
                    currentLevel.add(currentNode.val);
                    if (currentNode.left != null) {
                        queue.addLast(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        queue.addLast(currentNode.right);
                    }
                } else {
                    TreeNode currentNode = queue.pollLast();
                    currentLevel.add(currentNode.val);
                    if (currentNode.right != null) {
                        queue.addFirst(currentNode.right);
                    }
                    if (currentNode.left != null) {
                        queue.addFirst(currentNode.left);
                    }
                }
            }

                reverse = !reverse;
                result.add(currentLevel);
            }
            return result;
        }


// 5. 107. Binary Tree Level Order Traversal II.
 public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> result = new ArrayList<>();

        if(root == null){
            return result;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);
            for(int i = 0; i < levelSize; i++){
                TreeNode currentNode = queue.poll();
                currentLevel.add(currentNode.val);
                if(currentNode.left != null){
                    queue.offer(currentNode.left);
                }
                if(currentNode.right != null){
                    queue.offer(currentNode.right);
                }
            }
            result.add(0,currentLevel);
        }
        return result;
    }





    // 5. 116. Populating Next Right Pointers in Each Node.
    public Node connect(Node root) {
        if(root == null){
            return null;
        }
        Node leftmost = root;

        while (leftmost.left != null){
            Node current = leftmost;
            while (current != null){
                current.left.next = current.right;

                if(current.next != null){
                    current.right.next = current.next.left;
                }
                current = current.next;
            }
            leftmost = leftmost.left;
        }
        return root;
    }


// 6. 199. Binary Tree Right Side View.
        public List<Integer> rightSideView(TreeNode root) {
            List<Integer> result = new ArrayList<>();

            if (root == null) {
                return result;
            }

            Queue<TreeNode> queue = new LinkedList<>();
            queue.offer(root);

            while (!queue.isEmpty()) {
                int levelSize = queue.size();

                for (int i=0; i < levelSize; i++) {
                    TreeNode currentNode = queue.poll();

                    if (i == levelSize - 1) {
                        result.add(currentNode.val);
                    }

                    if (currentNode.left != null) {
                        queue.offer(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        queue.offer(currentNode.right);
                    }
                }
            }
            return result;


        }


 // 7. 101. Symmetric Tree.
    public boolean isSymmetric(TreeNode root){
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);

        while (!queue.isEmpty()){
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();

            if(left == null && right == null){
                continue;
            }
            if(left == null || right == null){
                return false;
            }
            if(left.val != right.val){
                return false;
            }
            queue.add(left.left);
            queue.add(right.right);
            queue.add(left.right);
            queue.add(right.left);

        }
        return true;
    }




// 27/03
// 1. 938. Range Sum of BST.
    public static int rangeSumBST(TreeNode root, int low, int high) {

        if(root == null){
            return 0;
        }

        Stack<TreeNode> stk = new Stack<>();
        stk.push(root);

        int sum = 0;
        while (!stk.isEmpty()){
            TreeNode current = stk.pop();
            if(current.val >= low && current.val <= high){
                sum += current.val;
            }

            if(current.left != null){
                stk.push(current.left);
            }
            if(current.right != null){
                stk.push(current.right);
            }
        }
        return sum;

    }


    // 2. 1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree.
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        Stack<TreeNode> stk = new Stack<>();
        stk.push(cloned);
        TreeNode ans = target;

        while (!stk.isEmpty()){
            TreeNode current = stk.pop();
            if(current.val == target.val){
                ans = current;
            }
            if(current.left != null){
                stk.push(current.left);
            }
            if(current.right != null){
                stk.push(current.right);
            }
        }

        return ans;
    }

    // 3. 617. Merge Two Binary Trees.
    public static TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1 == null){
            return root2;
        }
        if(root2 == null){
            return root1;
        }

        root1.val += root2.val;

        root1.left = mergeTrees(root1.left, root2.left);
        root1.right = mergeTrees(root1.right, root2.right);

        return root1;
    }



    // 4. 897. Increasing Order Search Tree.
    TreeNode dummy = new TreeNode();
    TreeNode dummyRoot = dummy;

    public TreeNode increasingBST(TreeNode root) {
        inOrder(root);
        return dummyRoot.right;
    }

    void inOrder(TreeNode node){
        if(node == null){
            return;
        }
        inOrder(node.left);
        dummy.right = new TreeNode(node.val);
        dummy = dummy.right;
        inOrder(node.right);
    }

    // 5. 590. N-ary Tree Postorder Traversal.
//    public List<Integer> postorder(Node root) {
//        ArrayList<Integer> List = new ArrayList<>();
//        return helper(root, List);
//    }
//    public List<Integer> helper(Node root , ArrayList<Integer> List){
//        if(root == null){
//            return List;
//        }
//        for(Node child : root.children){
//            helper(child, List);
//        }
//        List.add(root.val);
//
//        return List;
//    }


   // 6. 2331. Evaluate Boolean Binary Tree.
    public boolean evaluateTree(TreeNode root) {
        if(root == null){
            return false;
        }

        if(root.left == null || root.right == null){
            return root.val == 1;
        }

        if(root.val == 2){
            return evaluateTree(root.left) || evaluateTree(root.right);
        }

        return evaluateTree(root.left) && evaluateTree(root.right);
    }

// 7. 94. Binary Tree Inorder Traversal.
List<Integer> result = new ArrayList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null){
            return result;
        }
         inorderTraversal(root.left);
        result.add(root.val);
        inorderTraversal(root.right);
        return result;
    }


// 8. 589. N-ary Tree Preorder Traversal.
private void helper(Node root, ArrayList<Integer> result){
        result.add(root.val);
        for(Node child : root.children){
            if(child != null){
                helper(child, result);
            }
        }
    }

    public List<Integer> preorder(Node root) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        if(root != null){
            helper(root, result);
        }

        return result;
    }

// 9.  226. Invert Binary Tree.
public TreeNode invertTree(TreeNode root) {
        if(root == null){
            return null;
        }

        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);

        root.left = right;
        root.right = left;

        return root;
    

    }


// 10. 104. Maximum Depth of Binary Tree
 public int maxDepth(TreeNode root) {
        
        if(root == null){
            return 0;
        }

        int left = 0;
        int right = 0;

        if(root.left != null){
           left =  maxDepth(root.left);
        }else{
            left = 0;
        }

        if(root.right != null){
            right = maxDepth(root.right);
        }else{
            right = 0;
        }

        return Math.max(left, right) + 1;


    }


// 11. 559. Maximum Depth of N-ary Tree.
public int maxDepth(Node root) {
        if(root == null){
            return 0;
        }
    
         int maxDepth = 0;
        for(Node child : root.children){
            maxDepth = Math.max(maxDepth(child), maxDepth);
        }

        return maxDepth + 1;
    }


// 12. 145. Binary Tree Postorder Traversal.
   ArrayList<Integer> result = new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root == null){
            return result;
        }

        postorderTraversal(root.left);
        postorderTraversal(root.right);
        result.add(root.val);

        return result;
    }


// 13.  1022. Sum of Root To Leaf Binary Numbers
public int sumRootToLeaf(TreeNode root) {
        return helper(root,0);
    }
    private int helper(TreeNode node, int sum){
        if(node == null){
            return 0;
        }
        sum = (2 * sum) + node.val;
        if(node.left == null && node.right == null){
            return sum;
        }
        return helper(node.left , sum) + helper(node.right , sum);
    }

// 14. 965. Univalued Binary Tree.
public boolean isUnivalTree(TreeNode root) {
        TreeNode temp = root;
        return helper(root, temp);
        }
        
    private boolean helper(TreeNode root, TreeNode temp){
        if(root == null){
            return true;
        }
        if(root.val != temp.val){
            return false;
        }

        return helper(root.left, temp) && helper(root.right, temp);
    }

// 15. 463. Island Perimeter.
public int islandPerimeter(int[][] grid) {
        int perimeter = 0;

        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }

        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[i].length; j++){
                if(grid[i][j] == 1){
                    perimeter += 4;
                
                if(i > 0 && grid[i - 1][j] == 1){
                    perimeter -= 2;
                }
                if(j > 0 && grid[i][j - 1] == 1){
                    perimeter -= 2;
                }
            }
        }
        }
        return perimeter;
    }


// 16. 872. Leaf-Similar Trees.
public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        ArrayList<Integer> list1 = new ArrayList<>();
        ArrayList<Integer> list2 = new ArrayList<>();

        leafNodes(root1, list1);
        leafNodes(root2, list2);

        if(list1.size() != list2.size()){
            return false;
        }
        int j = 0;
        for(int i : list1){
            if(i != list2.get(j++)){
                return false;
            }
        }
        return true;

    }

    private void leafNodes(TreeNode root, ArrayList<Integer> list){
        if(root == null){
            return;
        }
        if(root.left == null && root.right == null){
            list.add(root.val);
            return;
        }

        leafNodes(root.left, list);
        leafNodes(root.right, list);

    }

// 17. 144. Binary Tree Preorder Traversal.
ArrayList<Integer> result = new ArrayList<Integer>();
    public List<Integer> preorderTraversal(TreeNode root) {
        
        if(root == null){
            return result;
        }
        result.add(root.val);
        preorderTraversal(root.left);
        preorderTraversal(root.right);
        
        return result;
    }


// 18. 257. Binary Tree Paths.
public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<String>();
        if(root == null){
            return result;
        }
        paths(root, "" , result);
        return result;

    }
    private void paths(TreeNode root, String path, List<String> result){
        if(root.left == null && root.right == null){
            result.add(path + root.val);
        }
        if(root.left != null){
            paths(root.left, path + root.val + "->", result);
        }
        if(root.right != null){
            paths(root.right, path + root.val + "->", result);
        }
    }

// 19. 100. Same Tree.
public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null){
            return true;
        }
        if(p == null || q == null){
            return false;
        }
        if(p.val != q.val){
            return false;
        }
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }

// 20. 563. Binary Tree Tilt.
int sum = 0;
    public int findTilt(TreeNode root) {
        postOrder(root);
        return sum;
    }
    private int postOrder(TreeNode root){
        if(root == null){
            return 0;
        }
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        sum += Math.abs(left - right);

        return left + right + root.val;
    }

// 21. 404. Sum of Left Leaves.
int sum = 0;
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left != null){
        if(root.left.left == null && root.left.right == null){
            sum += root.left.val;
        }else{
            sumOfLeftLeaves(root.left);
        }
        }
        if(root.right != null){
            sumOfLeftLeaves(root.right);
        }
        return sum;
    }

// 22. 543. Diameter of Binary Tree.
int diameter = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        dfs(root);
        return diameter;
    }
    private int dfs(TreeNode root){
        if(root == null){
            return -1;
        }
        int left = dfs(root.left);
        int right = dfs(root.right);

        diameter = Math.max(diameter, left + right + 2);

        return 1 + Math.max(left , right);


    }


// 23. 783. Minimum Distance Between BST Nodes.
List<Integer> list = new ArrayList<Integer>();
    public int minDiffInBST(TreeNode root) {
        dfs(root);
        Collections.sort(list);
        int min = Integer.MAX_VALUE;
       for(int i = 0; i < list.size() - 1; i++){
            min = Math.min(min, Math.abs(list.get(i) - list.get(i + 1)));
        }
        return min;
    }
    public void dfs(TreeNode root){
        if(root == null){
            return;
        }
        dfs(root.left);
        dfs(root.right);
        list.add(root.val);

        return;
    }

// 24. 530. Minimum Absolute Difference in BST.
List<Integer> list = new ArrayList<>();
    public int getMinimumDifference(TreeNode root) {
        postOrder(root);
        Collections.sort(list);
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < list.size() - 1; i++){
            min = Math.min(min, Math.abs(list.get(i) - list.get(i + 1)));
        }
        return min;
    }
    
    private void postOrder(TreeNode root){
        if(root == null){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        list.add(root.val);

        return;

    }
