// 1. 27. Remove Element.
   public int removeElement(int[] nums, int val) {
        int result = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != val){
                nums[result] = nums[i];
                result++;
            }
        }
        return result;
    }


// 2. 1920. Build Array from Permutation
 public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
      for(int i =0; i < nums.length; i++){
          ans[i] = nums[nums[i]];
      }
      return ans;
    }

// 3. 1929. Concatenation of Array.
    public int[] getConcatenation(int[] nums) {
        int[] result = new int[2 * nums.length];
        for(int i = 0; i < result.length; i++){
            result[i] = nums[i % nums.length];
        }
        return result;
    }


    // 4. 1480. Running Sum of 1d Array.
    public static int[] runningSum(int[] nums) {
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            int sum = 0;
            for(int j = 0; j <= i; j++){
                sum += nums[j];
            }
            result[i] = sum;
        }
        return result;
    }

    // 5. 1672. Richest Customer Wealth
    public static int maximumWealth(int[][] accounts) {
        int wealth = 0;
        for(int i = 0; i < accounts.length; i++){
            int sum = 0;
            for(int j = 0; j < accounts[i].length; j++){
                sum += accounts[i][j];
            }
            if(sum > wealth){
                wealth = sum;
            }
        }
        return wealth;
    }


    // 6. 1470. Shuffle the Array.
    public static int[] shuffle(int[] nums, int n) {
        int[] result = new int[nums.length];
        int j = 0;
        for(int i = 0; i < result.length; i =  i+2){
            result[i] = nums[j];
            result[i + 1] = nums[j + n];
            j++;

        }
        return  result;
    }


    // 7. 1431. Kids With the Greatest Number of Candies.
    public static List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        ArrayList<Boolean> lst = new ArrayList<Boolean>();
        int max = 0;
        for(int candy : candies){
            max = Math.max(max, candy);
        }
        for(int i = 0; i < candies.length; i++){
                if(candies[i] + extraCandies >= max){
                    lst.add(true);
                }else{
                    lst.add(false);
                }

        }
        return lst;
    }

           OR
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        ArrayList<Boolean> lst = new ArrayList<Boolean>();
        int max = 0;
        for(int candy : candies){
            max = Math.max(max, candy);
        }
        for(int i = 0; i < candies.length; i++){
               
            lst.add(candies[i] + extraCandies >= max);
        }
        return lst;
       }


  // 8. 1512. Number of Good Pairs
    public static int numIdenticalPairs(int[] nums) {
        int result = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] == nums[j]){
                    result++;
                }
            }
        }
        return result;
    }


    // 9. 1365. How Many Numbers Are Smaller Than the Current Number.
    public static int[] smallerNumbersThanCurrent(int[] nums) {
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            int count = 0;
            for(int j = 0; j < nums.length; j++){
                if(nums[i] > nums[j]){
                    count++;
                }
            }
            result[i] = count;
        }
        return result;
    }
