// 1. 27. Remove Element.
   public int removeElement(int[] nums, int val) {
        int result = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != val){
                nums[result] = nums[i];
                result++;
            }
        }
        return result;
    }


// 2. 1920. Build Array from Permutation
 public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
      for(int i =0; i < nums.length; i++){
          ans[i] = nums[nums[i]];
      }
      return ans;
    }

// 3. 1929. Concatenation of Array.
    public int[] getConcatenation(int[] nums) {
        int[] result = new int[2 * nums.length];
        for(int i = 0; i < result.length; i++){
            result[i] = nums[i % nums.length];
        }
        return result;
    }


    // 4. 1480. Running Sum of 1d Array.
    public static int[] runningSum(int[] nums) {
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            int sum = 0;
            for(int j = 0; j <= i; j++){
                sum += nums[j];
            }
            result[i] = sum;
        }
        return result;
    }

    // 5. 1672. Richest Customer Wealth
    public static int maximumWealth(int[][] accounts) {
        int wealth = 0;
        for(int i = 0; i < accounts.length; i++){
            int sum = 0;
            for(int j = 0; j < accounts[i].length; j++){
                sum += accounts[i][j];
            }
            if(sum > wealth){
                wealth = sum;
            }
        }
        return wealth;
    }


    // 6. 1470. Shuffle the Array.
    public static int[] shuffle(int[] nums, int n) {
        int[] result = new int[nums.length];
        int j = 0;
        for(int i = 0; i < result.length; i =  i+2){
            result[i] = nums[j];
            result[i + 1] = nums[j + n];
            j++;

        }
        return  result;
    }


    // 7. 1431. Kids With the Greatest Number of Candies.
    public static List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        ArrayList<Boolean> lst = new ArrayList<Boolean>();
        int max = 0;
        for(int candy : candies){
            max = Math.max(max, candy);
        }
        for(int i = 0; i < candies.length; i++){
                if(candies[i] + extraCandies >= max){
                    lst.add(true);
                }else{
                    lst.add(false);
                }

        }
        return lst;
    }

           OR
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        ArrayList<Boolean> lst = new ArrayList<Boolean>();
        int max = 0;
        for(int candy : candies){
            max = Math.max(max, candy);
        }
        for(int i = 0; i < candies.length; i++){
               
            lst.add(candies[i] + extraCandies >= max);
        }
        return lst;
       }


  // 8. 1512. Number of Good Pairs
    public static int numIdenticalPairs(int[] nums) {
        int result = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] == nums[j]){
                    result++;
                }
            }
        }
        return result;
    }


    // 9. 1365. How Many Numbers Are Smaller Than the Current Number.
    public static int[] smallerNumbersThanCurrent(int[] nums) {
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            int count = 0;
            for(int j = 0; j < nums.length; j++){
                if(nums[i] > nums[j]){
                    count++;
                }
            }
            result[i] = count;
        }
        return result;
    }


    // 10. 1389. Create Target Array in the Given Order.
    public static int[] createTargetArray(int[] nums, int[] index) {
      ArrayList<Integer> lst = new ArrayList<>();
      for(int i = 0; i < nums.length; i++){
          lst.add(index[i], nums[i]);
      }
      int[] target = new int[nums.length];
      for(int i = 0; i < lst.size(); i++){
          target[i] = lst.get(i);
      }
      return target;
    }


    // 11. 1832. Check if the Sentence Is Pangram.
    public static boolean   checkIfPangram(String sentence) {
        ArrayList<Character> lst = new ArrayList<>();
        HashSet<Character> set = new HashSet<>();
        for(char ch : sentence.toCharArray()){
            set.add(ch);
        }
        for(int i = 97; i <= 122; i++){
            lst.add((char)i);
        }
        int count = 0;

       for(char ch : set){
           if(lst.contains(ch)){
               count++;
           }
       }
        return lst.size() == count;

    }

// 12. 1732. Find the Highest Altitude
  public static int largestAltitude(int[] gain) {
       int max = 0;
       int count = 0;
       for(int i = 0; i < gain.length; i++){
           count += gain[i];
           max = Math.max(count, max);
       }
       return max;
    }


    // 13. 832. Flipping an Image.
    public static int[][] flipAndInvertImage(int[][] image) {
        int[][] result = new int[3][3];

        for(int i = 0; i < image.length; i++){
            for(int j = 0; j < image.length/2; j++){
                int temp = image[i][j];
                image[i][j] = image[i][image.length - j - 1];
                image[i][image.length - j - 1] = temp;
            }
        }

        for(int i = 0; i < image.length; i++){
            for(int j = 0; j < image[i].length; j++){
                if(image[i][j] == 0){
                    image[i][j] = 1;
                }else{
                    image[i][j] = 0;
                }
            }
        }
        return image;
    }

    // 14. 1295. Find Numbers with Even Number of Digits
    public static int findNumbers(int[] nums) {
        int result = 0;
        for(int i = 0; i < nums.length; i++){
            int count = 0;
               while (nums[i] > 0){
                   nums[i] = nums[i] / 10;
                   count++;
               }
               if(count % 2 == 0){
                   result++;
               }
           }

        return result;
    }


   // 15. 1572. Matrix Diagonal Sum.
    public  static int diagonalSum(int[][] mat) {
        int diagonalSum = 0;
      for(int i = 0; i < mat.length; i++){
          for(int j = 0; j < mat[i].length; j++){
              if(i == j){
                  diagonalSum += mat[i][j];
              }else if(i == mat[i].length - 1 - j){
                  diagonalSum += mat[i][j];
              }
          }
      }
      return diagonalSum;
    }



//   16.  867. Transpose Matrix.
    public static int[][] transpose(int[][] matrix) {
        int[][] result = new int[matrix[0].length][matrix.length];
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[i].length; j++){
                result[j][i] = matrix[i][j];
            }
        }
        return result;
    }


    // 17. 989. Add to Array-Form of Integer.
    public static List<Integer> addToArrayForm(int[] num, int k) {
        ArrayList<Integer> lst = new ArrayList<>();
//
//        StringBuilder str = new StringBuilder();
//        for(int i = 0; i < num.length; i++){
//            str.append(num[i]);
//        }
//       int sum = k + Integer.parseInt(str.toString());
//
//        while (sum > 0){
//            int remainder = sum % 10;
//            sum = sum / 10;
//            lst.add(remainder);
//
//        }
//        return lst.reversed();

        long number = num[num.length - 1];
        int j = 1;

        for(int i = num.length - 2; i >= 0; i--){
             number += (long) num[i] * (int) Math.pow(10,j);
            j++;
            System.out.println(number);

        }
        long result = k + number;
        System.out.println(result);
        while (result > 0){
            long remainder = result % 10;
            result /=  10;
            lst.add((int) remainder);
        }
        return lst.reversed();
    }



// 18. 1. Two Sum.
    public int[] twoSum(int[] nums, int target) {
        int[] result = {0,0};
        for(int i = 0; i < nums.length - 1; i++){
            for(int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    result[0] = i;
                    result[1] = j;
                }
            }
        }
        return result;
    }


    // 19. 1304. Find N Unique Integers Sum up to Zero.
    public static int[] sumZero(int n) {
        int[] result = new int[n];
     for(int i = 0; i < n - 1; i = i + 2){
         if(n % 2 == 0){
             result[i + 1] = -(i + 1);
             result[i] = (i + 1);
         }else{
             result[i + 1] = (i + 1);
             result[i] = -(i + 1);
             result[n - 1] = 0;
         }
     }
     return result;
    }


// 20. 53. Maximum Subarray
    public static int maxSubArray(int[] nums) {
        int sum = nums[0];
        int maxSum = nums[0];
        for(int i = 1; i < nums.length; i++){
            if(sum < 0){
                sum = nums[i];
            }else{
                sum += nums[i];
            }
            maxSum = Math.max(sum, maxSum);
        }
        return maxSum;

    }



    // 21. 66. Plus One.
    public static int[] plusOne(int[] digits) {
        for(int i = digits.length - 1; i >= 0; i--){
            if(digits[i] < 9){
                digits[i]++;
                return digits;
            }
            digits[i] = 0;

        }
        int[] result = new int[digits.length + 1];
        result[0] = 1;
        return result;
    }


    //22. 26 Remove Duplicates from Sorted Array.
    public static int removeDuplicates(int[] nums) {
        LinkedHashSet<Integer> set = new LinkedHashSet<>();
        for(int i : nums){
            set.add(i);
        }

        Arrays.fill(nums,0);
        int i = 0;
        for(int j : set){
            nums[i] = j;
            i++;
        }
        System.out.println(set);
        return set.size();
    }
