    // 1. 933. Number of Recent Calls.
//    private Queue<Integer> requests;
//    public RecentCounter() {
//        this.requests = new LinkedList<>();
//    }
//
//    public int ping(int t) {
//        requests.add(t);
//        while (requests.peek() < t - 3000) {
//            requests.poll();
//        }
//        return requests.size();
//    }


    // 2. 2073. Time Needed to Buy Tickets.
    public static int timeRequiredToBuy(int[] tickets, int k) {
        Queue<Integer> que = new LinkedList<>();

        for(int i = 0; i < tickets.length; i++){
            que.add(i);
        }
        int count = 0;
        while (!que.isEmpty()){
            ++count;

            int front = que.poll();
            if(tickets[front] >= 1){
                tickets[front]--;
            }
            if(k == front && tickets[front] == 0){
                break;
            }
            if(front != k && tickets[front] == 0){
                continue;
            }
            que.add(front);
        }
        return count;
    }
