// 1. 88. Merge Sorted Array.
    public static void merge(int[] nums1, int m, int[] nums2, int n) {
       int i = m;
       int j = 0;
       while (i < nums1.length){
           nums1[i++] = nums2[j++];

       }
       Arrays.sort(nums1);
    }


    // 2. 169. Majority Element.
    public static int majorityElement(int[] nums) {
        int j = 0;
       while (j < nums.length) {
           int current = nums[j];
           int i = 0;
           int count = 0;
           while (i < nums.length) {
               if (current == nums[i]) {
                   count++;
               }
               i++;
           }
           if (count > nums.length / 2) {
               return current;
           }else{
               j++;
           }
       }
       return  -1;

    }


    // 3. 217. Contains Duplicate.
    public static boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        int i = 0;
        while (i < nums.length - 1){
            if(nums[i] == nums[i+1]){
                return true;
            }
            i++;
        }
        return false;
    }


    // 4. 268. Missing Number.
    public static int missingNumber(int[] nums) {
        int sum = (nums.length * (nums.length + 1))/2;
        for(int i = 0; i < nums.length; i++){
            sum -= nums[i];
        }
        return sum;
    }


    // 5. 349. Intersection of Two Arrays.
    public static void intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set = new HashSet<Integer>();
        for(int i : nums1){
            set.add(i);
        }
        HashSet<Integer> intersection = new HashSet<Integer>();
        for(int i : nums2){
            if(set.contains(i)){
                intersection.add(i);
            }
        }
        int[] result = new int[intersection.size()];
        int j = 0;
        for(int i : intersection){
            result[j++] =  i;

        }
        System.out.println(Arrays.toString(result));
    }

    // 6. 350. Intersection of Two Arrays II.
    public static int[] intersect(int[] nums1, int[] nums2) {
    int i = 0;
    int j = 0;
    int k = 0;
    Arrays.sort(nums1);
    Arrays.sort(nums2);
    int[] result = new int[nums1.length * nums2.length];
    while (i < nums1.length && j < nums2.length){
        if(nums1[i] < nums2[j]){
            i++;
        } else if(nums1[i] > nums2[j]){
            j++;
        }else{
            result[k++] = nums1[i++];
            j++;
        }
    }
    return Arrays.copyOfRange(result,0,k);
    }



    // 7. 414. Third Maximum Number.
    public static int thirdMax(int[] nums) {
        Arrays.sort(nums);
       HashSet<Integer> set = new HashSet<>();
       for(int i : nums){
           set.add(i);
       }
       int[] result = new int[set.size()];
       int j = 0;
       for(int i : set){
           result[j++] = i;
       }
       Arrays.sort(result);
       int thirdMax1 = 0;
       if(result.length < 3){
           return result[result.length - 1];
       }else{
            thirdMax1 = result[result.length - 3];
       }
       return thirdMax1;
    }



    // 8. 628. Maximum Product of Three Numbers.
    public static int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int i = nums.length - 1;
        int count = 0;
        int product = 1;
        while (i >= 0 && count < 2){
            product *= nums[i];
            count++;
            i--;
        }
        System.out.println(product);
        int j = 0;
        int count1 = 0;
        int product1 = 1;
        while(j < nums.length && count1 < 2){
            product1 *= nums[j];
            count1++;
            j++;
        }

        return  Math.max(product * nums[nums.length - 3],product1 * nums[nums.length - 1]);
    }



    // 9. 905. Sort Array By Parity.
    public static int[] sortArrayByParity(int[] nums) {
    int[] result = new int[nums.length];
    int i = 0;
    int j = nums.length - 1;
    int k = 0;
    while (i < nums.length && k <= j){
        if(nums[i] % 2 != 0 ){
            result[j] = nums[i];
            i++;
            j--;
        }else{
            result[k] = nums[i];
            i++;
            k++;
        }
    }
    return result;

    }



    // 10. 922. Sort Array By Parity II.
    public static int[] sortArrayByParityII(int[] nums) {
        int[] result = new int[nums.length];
        int i = 0;
        int k = 0;
        int j = 1;
        while(i < nums.length){
            if(nums[i] % 2 == 0){
                result[k] = nums[i];
                i++;
                k += 2;
            }else{
                result[j] = nums[i];
                i++;
                j += 2;
            }
        }
        return result;
    }



    // 11. 976. Largest Perimeter Triangle.
    public static int largestPerimeter(int[] nums) {
        Arrays.sort(nums);
        for(int i = nums.length - 1; i > 1; i--){
            if(nums[i - 1] + nums[i - 2] > nums[i]){
                return nums[i - 1] + nums[i - 2] + nums[i];
            }
        }
        return 0;
    }



    // 12. 977. Squares of a Sorted Array.
    public static int[] sortedSquares(int[] nums) {
        int[] result = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            result[i] = nums[i] * nums[i];
        }
          Arrays.sort(result);
        return result;
    }

    // 13. 1051. Height Checker.
    public static int heightChecker(int[] heights) {
        ArrayList<Integer> lst = new ArrayList<>();
        for(int i : heights){
            lst.add(i);
        }
        Collections.sort(lst);
        int i = 0;
        int count = 0;
        while (i < heights.length){
            if(heights[i] != lst.get(i)){
               count++;
               i++;
            }else{
                i++;
            }
        }
        return count;
    }



    // 14. 1122. Relative Sort Array.
    public static int[] relativeSortArray(int[] arr1, int[] arr2) {
        int[] result = new int[arr1.length];
        int k = 0;
        for(int i : arr2){
            for(int j : arr1){
                if(i == j){
                    result[k] = j;
                    k++;
                }
            }
        }
        ArrayList<Integer> lst = new ArrayList<>();
        for(int i = 0; i < arr1.length; i++){
            int j;
            for(j = 0; j < result.length; j++) {
                if (arr1[i] == result[j]) {
                    break;
                }
            }
            if(j == result.length){
                lst.add(arr1[i]);
            }
            if(arr1[i] == 0){
                lst.add(0);
            }
        }
        Collections.sort(lst);
        for(int i : lst){
            result[k++] = i;
        }
        return result;
    }



   // 15. 1200. Minimum Absolute Difference.
    public static List<List<Integer>> minimumAbsDifference(int[] arr) {
       List<List<Integer>> result = new ArrayList<>();
       Arrays.sort(arr);
       int min = Integer.MAX_VALUE;
       for(int i = 0; i < arr.length - 1; i++){
           int diff = arr[i + 1] - arr[i];
           if(diff < min){
               min = diff;
               result.clear();
               result.add(Arrays.asList(arr[i], arr[i + 1]));
           }else if(diff == min){
               result.add(Arrays.asList(arr[i], arr[i + 1]));
           }

       }
       return result;
    }


    // 17. 1331. Rank Transform of an Array.
    public static int[] arrayRankTransform(int[] arr) {
     HashMap<Integer, Integer> map = new HashMap<>();
     int[] nums = new int[arr.length];
     for(int i = 0; i < arr.length; i++){
         nums[i] = arr[i];
     }
     Arrays.sort(nums);
     int rank = 1;
     for(int i = 0; i < nums.length; i++){
         if(!map.containsKey(nums[i])){
             map.put(nums[i],rank++);
         }
     }
     for(int i = 0; i < arr.length; i++){
          arr[i] = map.get(arr[i]);
     }
     return arr;
    }



   // 18. 1365. How Many Numbers Are Smaller Than the Current Number.
   public static int[] smallerNumbersThanCurrent(int[] nums) {
    int[] result = new int[nums.length];
    for(int i = 0; i < nums.length; i++){
        int count = 0;
        for(int j = 0; j < nums.length; j++){
            if(nums[j] < nums[i]){
                count++;
            }
            result[i] = count;
        }
    }
    return result;
    }



    // 19. 1464. Maximum Product of Two Elements in an Array.
    public static int maxProduct(int[] nums) {
        Arrays.sort(nums);
        return (nums[nums.length - 1] - 1) * (nums[nums.length - 2] - 1);
    }


    // 20. 1491. Average Salary Excluding the Minimum and Maximum Salary.
    public static double average(int[] salary) {
        Arrays.sort(salary);
        double aggregate = 0;
        for(int i = 1; i < salary.length - 1; i++){
            aggregate += salary[i];
        }
        return aggregate/(salary.length - 2);
    }




   // 22. 448. Find All Numbers Disappeared in an Array.
   public static List<Integer> findDisappearedNumbers(int[] nums) {
    Set<Integer> st = new HashSet<>();
    List<Integer> lst = new ArrayList<>();
    for(int i : nums){
        st.add(i);
    }
    for(int i = 1; i <= nums.length; i++){
        if(!st.contains(i)){
            lst.add(i);
        }
    }
    return lst;
   }
