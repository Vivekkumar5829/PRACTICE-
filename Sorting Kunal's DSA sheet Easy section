    // 1. 88. Merge Sorted Array.
    public static void merge(int[] nums1, int m, int[] nums2, int n) {
       int i = m;
       int j = 0;
       while (i < nums1.length){
           nums1[i++] = nums2[j++];

       }
       Arrays.sort(nums1);
    }


    // 2. 169. Majority Element.
    public static int majorityElement(int[] nums) {
        int j = 0;
       while (j < nums.length) {
           int current = nums[j];
           int i = 0;
           int count = 0;
           while (i < nums.length) {
               if (current == nums[i]) {
                   count++;
               }
               i++;
           }
           if (count > nums.length / 2) {
               return current;
           }else{
               j++;
           }
       }
       return  -1;

    }


    // 3. 217. Contains Duplicate.
    public static boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        int i = 0;
        while (i < nums.length - 1){
            if(nums[i] == nums[i+1]){
                return true;
            }
            i++;
        }
        return false;
    }


    // 4. 268. Missing Number.
    public static int missingNumber(int[] nums) {
        int sum = (nums.length * (nums.length + 1))/2;
        for(int i = 0; i < nums.length; i++){
            sum -= nums[i];
        }
        return sum;
    }


    // 5. 349. Intersection of Two Arrays.
    public static void intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set = new HashSet<Integer>();
        for(int i : nums1){
            set.add(i);
        }
        HashSet<Integer> intersection = new HashSet<Integer>();
        for(int i : nums2){
            if(set.contains(i)){
                intersection.add(i);
            }
        }
        int[] result = new int[intersection.size()];
        int j = 0;
        for(int i : intersection){
            result[j++] =  i;

        }
        System.out.println(Arrays.toString(result));
    }

    // 6. 350. Intersection of Two Arrays II.
    public static int[] intersect(int[] nums1, int[] nums2) {
    int i = 0;
    int j = 0;
    int k = 0;
    Arrays.sort(nums1);
    Arrays.sort(nums2);
    int[] result = new int[nums1.length * nums2.length];
    while (i < nums1.length && j < nums2.length){
        if(nums1[i] < nums2[j]){
            i++;
        } else if(nums1[i] > nums2[j]){
            j++;
        }else{
            result[k++] = nums1[i++];
            j++;
        }
    }
    return Arrays.copyOfRange(result,0,k);
    }



    // 7. 414. Third Maximum Number.
    public static int thirdMax(int[] nums) {
        Arrays.sort(nums);
       HashSet<Integer> set = new HashSet<>();
       for(int i : nums){
           set.add(i);
       }
       int[] result = new int[set.size()];
       int j = 0;
       for(int i : set){
           result[j++] = i;
       }
       Arrays.sort(result);
       int thirdMax1 = 0;
       if(result.length < 3){
           return result[result.length - 1];
       }else{
            thirdMax1 = result[result.length - 3];
       }
       return thirdMax1;
    }

