public class SinglyLinkedList {
    private Node head;
    private Node tail;
    private int size;

    public SinglyLinkedList(){
        this.size = 0;
    }

    public class Node{
        public int value;
        public Node next;

        public Node(int value){
            this.value = value;
        }
        public Node(int value, Node next){
            this.value = value;
            this.next = next;
        }
    }


    // 1. Insert element at the first start of Linked List.
    public void insertFirst(int value){
        Node node = new Node(value);
        node.next = head;
        head = node;
        if(tail == null){
            tail = head;
        }
        size++;
    }


    // 2. Insert element at the end of the Linked List.
    public void insertLast(int value){
        if(tail == null){
            insertFirst(value);
            return;
        }
        Node node = new Node(value);
        tail.next = node;
        tail = node;
        size++;
    }


    // 3. Insert element at any given position in the Linked List.
    public void insertAtAnyPosition(int value, int position){
        if(position == 0){
            insertFirst(value);
        }
        if(position == size){
            insertLast(value);
        }
        Node temp = head;
        for(int i = 1; i < position; i++){
            temp = temp.next;
        }
        Node node = new Node(value, temp.next);
        temp.next = node;
        size++;
    }


    // 4. Display the Linked List.
    public void display(){
        Node temp = head;
        while (temp != null){
            System.out.print(temp.value + " -->");
           temp = temp.next;
        }
    }


    // 5. Insert at any position using recursion.
    public void insertRec(int value, int index){
        head = insertRec(value,index,head);
    }
    private Node insertRec(int value, int index, Node node){
        if(index == 0){
            Node temp = new Node(value, node);
            size++;
            return temp;
        }
        node.next = insertRec(value,index- 1,node.next);
        return node;
    }


// 6. 83. Remove Duplicates from Sorted List.
 public ListNode deleteDuplicates(ListNode head) {
         ListNode node = head;
        if(node == null){
            return node;
        }
        while(node.next != null){
            if(node.val == node.next.val){
                node.next = node.next.next;
            }else{
                node = node.next;
            }
        }
        return head;
    }


    // 7. Merge two sorted Linked List.
    public static SinglyLinkedList merge(SinglyLinkedList first, SinglyLinkedList second){
        Node f = first.head;
        Node s = second.head;

        SinglyLinkedList ans = new SinglyLinkedList();

        while (f != null && s != null){
            if(f.value < s.value){
                ans.insertLast(f.value);
                f = f.next;
            }else {
                ans.insertLast(s.value);
                s = s.next;
            }
        }
        while (f != null){
            ans.insertLast(f.value);
            f = f.next;
        }

        while (s != null){
            ans.insertLast(s.value);
            s = s.next;
        }
        return  ans;
    }



    // 8. 141. Linked List Cycle.
    public boolean hasCycle(Node head) {
        Node slow = head;
        Node fast = head;

        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                return true;
            }
        }
        return false;
    }



    // 9. Find the length of the cycle.
    public int lenghtOfCycle(Node head){
        Node fast = head;
        Node slow = head;
        while (fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                Node temp = slow;
                int length = 0;
                do{
                    temp = temp.next;
                    length++;
                }while (temp != slow);
                return length;
            }
        }
        return 0;
    }


// 10. 142. Linked List Cycle II.
    public Node detectCycle(Node head){
        int length = 0;
        Node fast = head;
        Node slow = head;

        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                length = lenghtOfCycle(slow);
                break;
            }
        }

        if(length == 0){
            return null;
        }
        Node f = head;
        Node s = head;

        while (length > 0){
            s = s.next;
            length--;
        }

        while (f != s){
            f = f.next;
            s = s.next;
        }
        return s;
    }


    // 11. 202. Happy Number.
    public boolean isHappy(int n) {
        int fast = n;
        int slow = n;

        do{
            slow = findSquare(slow);
            fast = findSquare(findSquare(fast));
        }while (slow != fast);

        if(slow == 1){
            return true;
        }
        return false;
    }

    public int findSquare(int n){
        int ans = 0;
        while (n > 0){
            int remainder = n % 10;
            ans += remainder * remainder;
            n = n / 10;
        }
        return ans;
    }


    // 12. 876. Middle of the Linked List.
    public Node middleNode(Node head) {
        Node fast = head;
        Node slow = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }


// 13. 148. Sort List.
    public Node sortList(Node head){
        if(head == null || head.next == null){
            return head;
        }
        Node mid = middleNode(head);
        Node left = sortList(head);
        Node right = sortList(mid);

        return merge(left, right);
    }
    Node merge(Node list1 , Node list2){
        Node dummyHead = new Node();
        Node tail = dummyHead;
        while (list1 != null && list2 != null){
            if(list1.value < list2.value){
                tail.next = list1;
                list1 = list1.next;
                tail = tail.next;
            }else{
                tail.next = list2;
                list2 = list2.next;
                tail = tail.next;
            }
        }
        tail.next = (list1 != null) ? list1 : list2;
        return dummyHead.next;
    }
    Node getMid(Node head){
        Node midPrev = null;
        while (head != null && head.next != null){
            midPrev = (midPrev == null) ? head : midPrev.next;
            head = head.next.next;
        }
        Node  mid = midPrev.next;
        midPrev.next = null;
        return mid;
    }


    // 14. Reverse a Linked List using Recursion.
    public void  reverse(Node node){
        if(node == tail){
            head = tail;
            return;
        }
        reverse(node.next);
        tail.next = node;
        tail = node;
        tail.next = null;
    }



    // 15. 206. Reverse Linked List.
    public Node reverseList(Node head) {
        if (head == null){
            return head;
        }

        Node prev = null;
        Node present = head;
        Node next = present.next;

        while (present != null){
            present.next = prev;
            prev = present;
            present = next;
            if(next != null){
                next = next.next;
            }
        }
        return prev;
    }






}
