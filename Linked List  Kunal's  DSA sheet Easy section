public class SinglyLinkedList {
    private Node head;
    private Node tail;
    private int size;

    public SinglyLinkedList(){
        this.size = 0;
    }

    public class Node{
        public int value;
        public Node next;

        public Node(int value){
            this.value = value;
        }
        public Node(int value, Node next){
            this.value = value;
            this.next = next;
        }
    }


    // 1. Insert element at the first start of Linked List.
    public void insertFirst(int value){
        Node node = new Node(value);
        node.next = head;
        head = node;
        if(tail == null){
            tail = head;
        }
        size++;
    }


    // 2. Insert element at the end of the Linked List.
    public void insertLast(int value){
        if(tail == null){
            insertFirst(value);
            return;
        }
        Node node = new Node(value);
        tail.next = node;
        tail = node;
        size++;
    }


    // 3. Insert element at any given position in the Linked List.
    public void insertAtAnyPosition(int value, int position){
        if(position == 0){
            insertFirst(value);
        }
        if(position == size){
            insertLast(value);
        }
        Node temp = head;
        for(int i = 1; i < position; i++){
            temp = temp.next;
        }
        Node node = new Node(value, temp.next);
        temp.next = node;
        size++;
    }


    // 4. Display the Linked List.
    public void display(){
        Node temp = head;
        while (temp != null){
            System.out.print(temp.value + " -->");
           temp = temp.next;
        }
    }


    // 5. Insert at any position using recursion.
    public void insertRec(int value, int index){
        head = insertRec(value,index,head);
    }
    private Node insertRec(int value, int index, Node node){
        if(index == 0){
            Node temp = new Node(value, node);
            size++;
            return temp;
        }
        node.next = insertRec(value,index- 1,node.next);
        return node;
    }


// 6. 83. Remove Duplicates from Sorted List.
 public ListNode deleteDuplicates(ListNode head) {
         ListNode node = head;
        if(node == null){
            return node;
        }
        while(node.next != null){
            if(node.val == node.next.val){
                node.next = node.next.next;
            }else{
                node = node.next;
            }
        }
        return head;
    }


    // 7. Merge two sorted Linked List.
    public static SinglyLinkedList merge(SinglyLinkedList first, SinglyLinkedList second){
        Node f = first.head;
        Node s = second.head;

        SinglyLinkedList ans = new SinglyLinkedList();

        while (f != null && s != null){
            if(f.value < s.value){
                ans.insertLast(f.value);
                f = f.next;
            }else {
                ans.insertLast(s.value);
                s = s.next;
            }
        }
        while (f != null){
            ans.insertLast(f.value);
            f = f.next;
        }

        while (s != null){
            ans.insertLast(s.value);
            s = s.next;
        }
        return  ans;
    }



    // 8. 141. Linked List Cycle.
    public boolean hasCycle(Node head) {
        Node slow = head;
        Node fast = head;

        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                return true;
            }
        }
        return false;
    }





}
