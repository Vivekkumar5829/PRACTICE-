import java.util.Stack;

public class StacknQueue {

}

//  1. Implementation of Queue using Stack.(Insertion Constant)
class QueueUsingStack{
    private Stack<Integer> first;
    private Stack<Integer> second;

    public QueueUsingStack(){
        first = new Stack<>();
        second = new Stack<>();
    }


    public void add(int item){
        first.push(item);
    }


    public int remove() throws Exception{
        while (!first.isEmpty()){
            second.push(first.pop());
        }
        int removed = second.pop();

        while (!second.isEmpty()){
            first.push(second.pop());
        }
        return removed;
    }


    public int peek() throws Exception{
        while(!first.isEmpty()){
            second.push(first.pop());
        }
        int peeked = second.peek();
        while (!second.isEmpty()){
            first.push(second.pop());
        }
        return peeked;
    }


    public boolean isEmpty(){
        return first.isEmpty();
    }
}



// 2. Implementation of Queue using Stack.(Remove Constant)
class QueueUsingStack11{
    private Stack<Integer> first;
    private Stack<Integer> second;
    
    public QueueUsingStack11(){
        first = new Stack<>();
        second = new Stack<>();
    }


    public void add(int item) throws Exception{
        while (!first.isEmpty()){
            second.push(first.pop());
        }
        first.push(item);
        while (!second.isEmpty()){
            first.push(second.pop());
        }
    }

    
    public int remove() throws Exception{
        return first.pop();
    }


    
    public int peek() throws Exception{
        return first.peek();
    }


    
    public boolean isEmpty(){
        return first.isEmpty();
    }
}



// 3. 20. Valid Parentheses.
class solution {
    public boolean isValid(String s) {

        Stack<Character> stk = new Stack<>();
        for (char ch : s.toCharArray()) {
            if (ch == '(' || ch == '{' || ch == '[') {
                stk.push(ch);
            } else {
                if (ch == ')') {
                    if (stk.isEmpty() || stk.pop() != '(') {
                        return false;
                    }
                }
                if (ch == '}') {
                    if (stk.isEmpty() || stk.pop() != '{') {
                        return false;
                    }
                }
                if (ch == ']') {
                    if (stk.isEmpty() || stk.pop() != '[') {
                        return false;
                    }
                }
            }
        }
        return stk.isEmpty();
    }
}



// 4. 921. Minimum Add to Make Parentheses Valid.
class Solution {
    public int minAddToMakeValid(String s) {
        Stack<Character> stk = new Stack<>();
        for(char ch : s.toCharArray()){
            if(ch == ')'){
                if(!stk.isEmpty() && stk.peek() == '('){
                    stk.pop();
                }else {
                    stk.push(ch);
                }
            }else {
                stk.push(ch);
            }
        }
        return stk.size();
    }
}



// Patterns
    // 1. Next Greater Element.
    public static Object[] nextGreater(int[] nums){
        List<Integer> result = new ArrayList<>();

        Stack<Integer> stk = new Stack<>();
        for (int i = nums.length - 1; i >= 0; i--){
            if(stk.isEmpty()){
                result.add(-1);
            }else if (!stk.isEmpty() && stk.peek() > nums[i]){
                result.add(stk.peek());
            }else if (!stk.isEmpty() && stk.peek() <= nums[i]){
                while (!stk.isEmpty() && stk.peek() <= nums[i]){
                    stk.pop();
                }

                if(stk.isEmpty()){
                    result.add(-1);
                }else{
                    result.add(stk.peek());
                }
            }
            stk.push(nums[i]);
        }


        return result.reversed().toArray();
    }



    // 2. Next Greater Element to the left.
    public static Object[] nextGreaterToLeft(int[] nums){
        Stack<Integer> stk = new Stack<>();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < nums.length; i++){
            if(stk.isEmpty()){
                lst.add(-1);
            }else if (!stk.isEmpty() && stk.peek() > nums[i]) {
                lst.add(stk.peek());
            }else if (!stk.isEmpty() && stk.peek() <= nums[i]){
                while (!stk.isEmpty() && stk.peek() <= nums[i]){
                    stk.pop();
                }
                if(stk.isEmpty()){
                    lst.add(-1);
                }else{
                    lst.add(stk.peek());
                }
            }

            stk.add(nums[i]);
        }

        return lst.toArray();
    }
