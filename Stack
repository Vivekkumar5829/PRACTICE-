import java.util.Stack;

public class StacknQueue {

}

//  1. Implementation of Queue using Stack.(Insertion Constant)
class QueueUsingStack{
    private Stack<Integer> first;
    private Stack<Integer> second;

    public QueueUsingStack(){
        first = new Stack<>();
        second = new Stack<>();
    }


    public void add(int item){
        first.push(item);
    }


    public int remove() throws Exception{
        while (!first.isEmpty()){
            second.push(first.pop());
        }
        int removed = second.pop();

        while (!second.isEmpty()){
            first.push(second.pop());
        }
        return removed;
    }


    public int peek() throws Exception{
        while(!first.isEmpty()){
            second.push(first.pop());
        }
        int peeked = second.peek();
        while (!second.isEmpty()){
            first.push(second.pop());
        }
        return peeked;
    }


    public boolean isEmpty(){
        return first.isEmpty();
    }
}



// 2. Implementation of Queue using Stack.(Remove Constant)
class QueueUsingStack11{
    private Stack<Integer> first;
    private Stack<Integer> second;
    
    public QueueUsingStack11(){
        first = new Stack<>();
        second = new Stack<>();
    }


    public void add(int item) throws Exception{
        while (!first.isEmpty()){
            second.push(first.pop());
        }
        first.push(item);
        while (!second.isEmpty()){
            first.push(second.pop());
        }
    }

    
    public int remove() throws Exception{
        return first.pop();
    }


    
    public int peek() throws Exception{
        return first.peek();
    }


    
    public boolean isEmpty(){
        return first.isEmpty();
    }
}



// 3. 20. Valid Parentheses.
class solution {
    public boolean isValid(String s) {

        Stack<Character> stk = new Stack<>();
        for (char ch : s.toCharArray()) {
            if (ch == '(' || ch == '{' || ch == '[') {
                stk.push(ch);
            } else {
                if (ch == ')') {
                    if (stk.isEmpty() || stk.pop() != '(') {
                        return false;
                    }
                }
                if (ch == '}') {
                    if (stk.isEmpty() || stk.pop() != '{') {
                        return false;
                    }
                }
                if (ch == ']') {
                    if (stk.isEmpty() || stk.pop() != '[') {
                        return false;
                    }
                }
            }
        }
        return stk.isEmpty();
    }
}



// 4. 921. Minimum Add to Make Parentheses Valid.
class Solution {
    public int minAddToMakeValid(String s) {
        Stack<Character> stk = new Stack<>();
        for(char ch : s.toCharArray()){
            if(ch == ')'){
                if(!stk.isEmpty() && stk.peek() == '('){
                    stk.pop();
                }else {
                    stk.push(ch);
                }
            }else {
                stk.push(ch);
            }
        }
        return stk.size();
    }
}



// Patterns
    // 1. Next Greater Element.
    public static Object[] nextGreater(int[] nums){
        List<Integer> result = new ArrayList<>();

        Stack<Integer> stk = new Stack<>();
        for (int i = nums.length - 1; i >= 0; i--){
            if(stk.isEmpty()){
                result.add(-1);
            }else if (!stk.isEmpty() && stk.peek() > nums[i]){
                result.add(stk.peek());
            }else if (!stk.isEmpty() && stk.peek() <= nums[i]){
                while (!stk.isEmpty() && stk.peek() <= nums[i]){
                    stk.pop();
                }

                if(stk.isEmpty()){
                    result.add(-1);
                }else{
                    result.add(stk.peek());
                }
            }
            stk.push(nums[i]);
        }


        return result.reversed().toArray();
    }

 // 2. Next Greater Element to the left.
    public static Object[] nextGreaterToLeft(int[] nums){
        Stack<Integer> stk = new Stack<>();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < nums.length; i++){
            if(stk.isEmpty()){
                lst.add(-1);
            }else if (!stk.isEmpty() && stk.peek() > nums[i]) {
                lst.add(stk.peek());
            }else if (!stk.isEmpty() && stk.peek() <= nums[i]){
                while (!stk.isEmpty() && stk.peek() <= nums[i]){
                    stk.pop();
                }
                if(stk.isEmpty()){
                    lst.add(-1);
                }else{
                    lst.add(stk.peek());
                }
            }

            stk.add(nums[i]);
        }

        return lst.toArray();
    }



    // 3. Nearest Smallest to Left
    public static Object[] smallestToLeft(int[] nums) {
        Stack<Integer> stk = new Stack<>();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (stk.isEmpty()) {
                lst.add(-1);
            } else if (!stk.isEmpty() && stk.peek() < nums[i]) {
                lst.add(stk.peek());
            } else if (!stk.isEmpty() && stk.peek() >= nums[i]) {
                while (!stk.isEmpty() && stk.peek() >= nums[i]) {
                    stk.pop();
                }
                if (stk.isEmpty()) {
                    lst.add(-1);
                } else {
                    lst.add(stk.peek());
                }
            }
            stk.push(nums[i]);


        }
        return lst.toArray();
    }

    // 4. Nearest Smallest to the Right.
    public static Object[] smallestToTheRight(int[] nums) {
        Stack<Integer> stk = new Stack<>();
        List<Integer> lst = new ArrayList<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            if (stk.isEmpty()) {
                lst.add(-1);
            } else if (!stk.isEmpty() && stk.peek() < nums[i]) {
                lst.add(stk.peek());
            } else if (!stk.isEmpty() && stk.peek() >= nums[i]) {
                while (!stk.isEmpty() && stk.peek() >= nums[i]) {
                    stk.pop();
                }
                if (stk.isEmpty()) {
                    lst.add(-1);
                } else {
                    lst.add(stk.peek());
                }

            }

            stk.add(nums[i]);


        }
        return lst.reversed().toArray();
    }



    // 5. 1475. Final Prices With a Special Discount in a Shop.
    public static int[] finalPrices(int[] prices) {
        Stack<Integer> stk = new Stack<>();
        int[] result = new int[prices.length];
        int index = result.length -1;
        for(int i = prices.length - 1; i >= 0; i--){
            if(stk.isEmpty()){
                result[index] = prices[i];
                index--;
            }else if(stk.peek() <= prices[i]){
                result[index] = prices[i] - stk.peek();
                index--;
            }else if(!stk.isEmpty() && stk.peek() > prices[i]){
                while (!stk.isEmpty() && stk.peek() > prices[i]){
                stk.pop();
            }
                if(stk.isEmpty()){
                    result[index] = prices[i];
                    index--;
                }else{
                    result[index] = prices[i] - stk.peek();
                    index--;
                }
            }
         stk.add(prices[i]);

        }

        return result;
    }


    // 6. 682. Baseball Game.
    public static int calPoints(String[] operations) {
        Stack<Integer> stk = new Stack<>();
        for(int i = 0; i < operations.length; i++){
            if(Objects.equals(operations[i], "C")){
                stk.pop();
            }else if (Objects.equals(operations[i], "D")){
                stk.push(stk.peek() * 2);
            }else if (Objects.equals(operations[i], "+")){
                stk.push(stk.peek() + stk.elementAt(stk.size() - 2));
            }else{
                stk.push(Integer.valueOf(operations[i]));
            }
        }

        int result = 0;
        while (!stk.isEmpty()){
            result += stk.pop();
        }
        return result;
    }


   // 7. 1614. Maximum Nesting Depth of the Parentheses.
    public static int maxDepth(String s) {
//        int max = 0;
//        Stack<Character> stk = new Stack<>();
//        for(int i = 0; i < s.length(); i++){
//            if(s.charAt(i) == '('){
//                stk.push(s.charAt(i));
//                max = Math.max(max, stk.size());
//            }else if (s.charAt(i) == ')'){
//                stk.pop();
//            }
//        }
//        return max;


        int max = 0;
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '('){
                count++;
            }else if(s.charAt(i) == ')'){
                count--;
            }
            if(count > max){
                max = count;
            }
        }
        return max;
    }


    //8. 496. Next Greater Element I.
    public static int[] nextGreaterElement(int[] nums1, int[] nums2) {

        HashMap<Integer, Integer> map = new HashMap<>();
        Stack<Integer> stk = new Stack<>();

        for (int i = nums2.length - 1; i >= 0; i--) {
            while (!stk.isEmpty() && stk.peek() <= nums2[i]) {
                stk.pop();
            }
            if (stk.isEmpty()) {
                map.put(nums2[i], -1);
            } else {
                map.put(nums2[i], stk.peek());
            }
            stk.push(nums2[i]);
        }

        for (int i = 0; i < nums1.length; i++) {
            if (map.containsKey(nums1[i])) {
                nums1[i] = map.get(nums1[i]);
            }
        }
        return nums1;
    }



    // 9. 1700. Number of Students Unable to Eat Lunch.
    public static int countStudents(int[] students, int[] sandwiches) {
        Deque<Integer> que = new LinkedList<>();
        for(int i : students){
            que.add(i);
        }

        Stack<Integer> stk = new Stack<>();
        for(int i = sandwiches.length -  1; i >= 0; i--){
            stk.push(sandwiches[i]);
        }
        int count = 0;
        int eaten = 0;

        while (!stk.isEmpty()){
            if(Objects.equals(stk.peek(), que.peek())){
                eaten++;
                stk.pop();
                que.poll();
            }else{
                count++;
                int temp = que.peekFirst();
                que.pollFirst();
                que.add(temp);
            }
            if(count == que.size()){
                break;
            }
        }
        return students.length - eaten;

    }


    // 10. 1047. Remove All Adjacent Duplicates In String.
    public static String removeDuplicates(String s) {
        Stack<Character> stk = new Stack<>();
        for(char ch : s.toCharArray()){
            if(!stk.isEmpty() && stk.peek() == ch){
                stk.pop();
            }else{
                stk.push(ch);
            }
        }

        StringBuilder sb = new StringBuilder();
        while (!stk.isEmpty()){
            sb.append(stk.pop());
        }

        return sb.reverse().toString();
    }


// 11. 6 stock span problem.
     public static int[] stockSpan(int [] prices){
        Stack<Integer> stk = new Stack<>();
        int[] result = new int[prices.length];
        
        for(int i = 0; i < prices.length; i++){
            while (!stk.isEmpty() && prices[stk.peek()] <= prices[i]){
                stk.pop();
            }
            if(stk.isEmpty()){
                result[i] = i + 1;
            }else{
                result[i] = i - stk.peek();
            }
            stk.push(i);
        }

        return result;
     }

// 12. 2696. Minimum String Length After Removing Substrings.
     public static int minLength(String s) {
        Stack<Character> stk = new Stack<>();
        for(int i = s.length() - 1; i >= 0; i--){
            if(!stk.isEmpty()  && s.charAt(i) == 'C' && stk.peek() == 'D' ){
                stk.pop();
            }else if(!stk.isEmpty() && s.charAt(i) == 'A' && stk.peek() == 'B'){
                stk.pop();
            }else{
                stk.push(s.charAt(i));
            }
        }

        return stk.size();
     }

     // 13. 1544. Make The String Great.
     public static String makeGood(String s) {
        Stack<Character> stk = new Stack<>();
        for(int i = s.length() - 1; i >= 0; i--) {
            if (!stk.isEmpty() && stk.peek()!=s.charAt(i)) {
                String s1 = s.charAt(i) + "";
                String s2 = stk.peek() + "";
                if (s1.equalsIgnoreCase(s2)) {
                    stk.pop();
                }else{
                    stk.push(s.charAt(i));
                }
            }else {
                stk.push(s.charAt(i));
            }
        }
        StringBuilder sb = new StringBuilder();
        for(char ch : stk){
            sb.append(ch);
        }

        return sb.reverse().toString();

     }


// 14. 844. Backspace String Compare.
     public static boolean backspaceCompare(String s, String t) {
        Stack<Character> stk1 = new Stack<>();
        Stack<Character> stk2 = new Stack<>();

        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '#') {
                if (!stk1.isEmpty()) {
                    stk1.pop();
                }
            }else{
                stk1.push(s.charAt(i));
            }
        }

        for(int i = 0; i < t.length(); i++){
            if (t.charAt(i) == '#') {
                if(!stk2.isEmpty()){
                stk2.pop();
            }
            }
            else{
                stk2.push(t.charAt(i));
            }
        }

        return stk1.equals(stk2);
     }


// 15. Max Area Histogram.
    public static int[] histogram(int[] arr){
        int[] right = nearestSmallerToRight(arr);
        int[] left = nearestSmallerToLeft(arr);
        int[] width = new int[arr.length];
        
        int max = Integer.MIN_VALUE;
        
        for(int i = 0; i < arr.length; i++){
            width[i] = (right[i] - left[i] - 1) * arr[i];
            if(width[i] > max){
                max = width[i];
            }

        }
//        System.out.println(max);
//        System.out.println(Arrays.toString(right));
//        System.out.println(Arrays.toString(left));
        return width;
    }
    public static int[] nearestSmallerToRight(int [] arr){
        Stack<Integer> stk = new Stack<>();
        int[] right = new int[arr.length];

        for(int i = arr.length - 1; i >= 0; i--){
            while (!stk.isEmpty() && arr[stk.peek()] > arr[i]){
                stk.pop();
            }
            if(stk.isEmpty()){
                right[i] = arr.length;
            }else {
                right[i] = stk.peek();
            }

            stk.push(i);
        }

        return right;
    }
    public static int[] nearestSmallerToLeft(int[] arr){
        Stack<Integer> stk = new Stack<>();
        int[] left = new int[arr.length];

        for(int i = 0; i < arr.length; i++){
            while (!stk.isEmpty() && arr[stk.peek()] > arr[i]){
                stk.pop();
            }
            if(stk.isEmpty()){
                left[i] = -1;
            }else {
                left[i] = stk.peek();
            }
            stk.push(i);
        }
        return left;

    }


// 16. Rain Water Tapping.
    public static int rainWaterTapping(int[] arr){

        int[] maximumLeft = maximumLeft(arr);
        int[] maximumRight = maximumRight(arr);
        int tapping = 0;
        int[] min = new int[arr.length];

        for(int i = 0; i < arr.length; i++){
            min[i] = Math.min(maximumLeft[i], maximumRight[i]);

            tapping += (min[i] - arr[i]) * 1;
        }

//        System.out.println(tapping);
        System.out.println(Arrays.toString(min));
        return tapping;
    }
    public static int[] maximumLeft(int[] arr){
        int[] maxLeft = new int[arr.length];
        maxLeft[0] = arr[0];

        for(int i = 1; i < arr.length; i++){
            maxLeft[i] = Math.max(maxLeft[i - 1], arr[i]);
        }

        return maxLeft;
    }

    public static int[] maximumRight(int[] arr){

        int[] maxRight = new int[arr.length];
        maxRight[arr.length - 1] = arr[arr.length - 1];

        for(int i = arr.length - 2; i >= 0; i--){
            maxRight[i] = Math.max(maxRight[i + 1], arr[i]);
        }

        return maxRight;

    }


// 17. 1614. Maximum Nesting Depth of the Parentheses.
public static int maxDepth(String s) {
        int result = 0;
        Stack<Character> stk = new Stack<Character>();
        for(char ch : s.toCharArray()){
            if(ch == '('){
                stk.push('(');
            }
            if(ch == ')'){
                result = Math.max(result, stk.size());
                stk.pop();
            }
        }
        return result;
    }



