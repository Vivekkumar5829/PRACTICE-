    // 1. 2006. Count Number of Pairs With Absolute Difference K
    public static int countKDifference(int[] nums, int k) {
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j < nums.length; j++){
//                if(nums[i] - nums[j] == k || nums[i] - nums[j] == -1 * k){
                if(Math.abs(nums[i] - nums[j]) == k){
                    count++;
                }
            }
        }
        return count;
    }


// 2. 2913. Subarrays Distinct Element Sum of Squares I.
    public static int sumCounts(List<Integer> nums) {
        int result = 0;
        for(int i = 0; i < nums.size(); i++){
            HashSet<Integer> set = new HashSet<>();
            for(int j = i; j < nums.size(); j++){
                if(!set.contains(nums.get(j))){
                    set.add(nums.get(j));
                }
                result += set.size() * set.size();
            }
        }
        return result;
    }


// 3. 2956. Find Common Elements Between Two Arrays.
    public static int[] findIntersectionValues(int[] nums1, int[] nums2) {
    HashMap<Integer, Integer> mapNum1 = new HashMap<>();
        for(int i = 0; i < nums1.length; i++) {

            if (!mapNum1.containsKey(nums1[i])) {
                mapNum1.put(nums1[i], 1);
            } else {
                mapNum1.put(nums1[i], mapNum1.get(nums1[i]) + 1);
            }
        }


        HashMap<Integer, Integer> mapNum2 = new HashMap<>();
        for(int i = 0; i < nums2.length; i++) {
            if (!mapNum2.containsKey(nums2[i])) {
                mapNum2.put(nums2[i], 1);
            } else {
                mapNum2.put(nums2[i], mapNum2.get(nums2[i]) + 1);
            }
        }

        int left = 0;
        Set<Integer> set = mapNum1.keySet();
        for(int i : set){
            if(mapNum2.containsKey(i)){
                left += mapNum1.get(i);
            }

        }


        int right = 0;

        Set<Integer> set1 = mapNum2.keySet();
        for(int i : set1){
            if(mapNum1.containsKey(i)){
                right += mapNum2.get(i);
            }
        }
        return new int[]{left,right};
    }



// 4.  9. Palindrome Number
    public static boolean isPalindrome(int x) {
        String str = String.valueOf(x);
       int i = 0;
       int j = str.length() - 1;

       while (i <= j){
           if(str.charAt(i) != str.charAt(j)){
               return false;
           }
           i++;
           j--;
       }

        return  true;
    }


// 5. 2215. Find the Difference of Two Arrays
    public static List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        List<Integer> nums1Distinct = new ArrayList<>();
        List<Integer> nums2Distinct = new ArrayList<>();

        HashSet<Integer> num1 = new HashSet<>();
        HashSet<Integer> num2 = new HashSet<>();

        for(int i : nums1){
            num1.add(i);
        }

        for(int i : nums2){
            num2.add(i);
        }

        for (int i : num1){
            if (!num2.contains(i)){
                nums1Distinct.add(i);
            }
        }

        for(int i : num2) {
            if (!num1.contains(i)) {
                nums2Distinct.add(i);
            }
        }

        return List.of(nums1Distinct,nums2Distinct);

    }


// 6. 1748. Sum of Unique Elements.
    public static int sumOfUnique(int[] nums) {
        HashMap<Integer, Integer> freqTable = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {

            if (!freqTable.containsKey(nums[i])) {
                freqTable.put(nums[i], 1);
            } else {
                freqTable.put(nums[i], freqTable.get(nums[i]) + 1);
            }
        }


        int sum = 0;
        Set<Integer> keys = freqTable.keySet();
        for(int i : keys){
            if(freqTable.get(i) == 1){
                sum += i;
            }
        }

        return sum;
    }


    // 7. 1941. Check if All Characters Have Equal Number of Occurrences.
    public static boolean areOccurrencesEqual(String s) {

        HashMap<Character,Integer> map = new HashMap<>();
        for(char ch : s.toCharArray()){
            if(!map.containsKey(ch)){
                map.put(ch,1);
            }else{
                map.put(ch,map.get(ch) + 1);
            }
        }
        Set<Integer> freq = new HashSet<>(map.values());
        
        return freq.size() == 1 ;
    }


// 8. 1207. Unique Number of Occurrences.
    public static boolean uniqueOccurrences(int[] arr) {

        HashMap<Integer, Integer> freqTable = new HashMap<>();
        for(int i : arr){
            if(!freqTable.containsKey(i)){
                freqTable.put(i, 1);
            }else{
                freqTable.put(i, freqTable.get(i) + 1);
            }
        }

        HashSet<Integer> set = new HashSet<>(freqTable.values());

        return freqTable.size() == set.size();

    }


    // 10. 961. N-Repeated Element in Size 2N Array.
    public static int repeatedNTimes(int[] nums) {
//        HashMap<Integer,Integer> freqTable = new HashMap<>();
//        for(int i : nums){
//            if(!freqTable.containsKey(i)){
//                freqTable.put(i , 1);
//            }else{
//                freqTable.put(i, freqTable.get(i) + 1);
//            }
//        }
//
//        int n = nums.length / 2;
//
//
//
//        Set<Integer> set = freqTable.keySet();
//        for(int i : set){
//            if(freqTable.get(i) == n){
//                return i;
//            }
//        }
//
//
//        return -1;


        HashSet<Integer> set = new HashSet<>();
        for (int i : nums){
            if(set.contains(i)){
                return i;
            }else {
                set.add(i);
            }
        }
        return -1;
    }
