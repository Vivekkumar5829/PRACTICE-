// 1. 1108. Defanging an IP Address.
    public static String defangIPaddr(String address) {
        StringBuilder str = new StringBuilder();  //StringBuilder is faster than StringBuffer(because of properties StringBuffer have thread-safe and synchronized).
        for(int i = 0; i < address.length(); i++){
            if(address.charAt(i) == '.'){
                str.append("[.]");
            }else {
                str.append(address.charAt(i));
            }
        }
        return str.toString();
    }

// 2. 1528. Shuffle String.
    public static String restoreString(String s, int[] indices) {
       char[] cha = new char[s.length()];
        for(int i =  0; i < s.length(); i++){
            cha[indices[i]] = s.charAt(i);
        }
        return new String(cha);
    }


// 3. 1678. Goal Parser Interpretation.
    public static String interpret(String command) {
        StringBuilder str = new StringBuilder();
        for(int i = 0; i < command.length(); i++){
            if(command.charAt(i) == '(' && command.charAt(i+1) == ')'){
                str.append("o");
                i++;
            }else if(command.charAt(i) == '(' && command.charAt(i+1) == 'a' && command.charAt(i+2) == 'l' && command.charAt(i + 3) == ')'){
                str.append("al");
                i = i+3;
            } else{
                str.append(command.charAt(i));
            }
        }
        return str.toString();
    }


// 4. 1859. Sorting the Sentence.
    public static String  sortSentence(String s) {
        String[] str = s.split(" ");
        String[] result = new String[str.length];
        for(int i = 0; i < str.length; i++){
            int k = Character.getNumericValue(str[i].charAt(str[i].length() - 1));
            result[k- 1] = str[i].substring(0,str[i].length() -1);
        }
       StringBuilder strr = new StringBuilder();
        for(int i = 0; i < result.length; i++){
            strr.append(result[i]).append(" ");
        }
    return strr.toString().trim();
    }


// 5. 1662. Check If Two String Arrays are Equivalent.
    public static boolean   arrayStringsAreEqual(String[] word1, String[] word2) {
        StringBuilder str1 = new StringBuilder();
        StringBuilder str2 = new StringBuilder();
        for(int i = 0 ; i < word1.length; i++){
            str1.append(word1[i]);
        }
        for(int i = 0 ; i < word2.length; i++){
            str2.append(word2[i]);
        }
        String str3 = str1.toString();
        String str4 = str2.toString();
        return str3.equals(str4);
    }


// 6. 709 To Lower Case.
    public static String toLowerCase(String s) {
        StringBuilder str = new StringBuilder(s);
        for (int i = 0; i < str.length(); i++) {
            Character ch = str.charAt(i);
            if (Character.isUpperCase(ch)) {
                str.replace(i, i + 1,
                        Character.toLowerCase(ch) + "");
            }
    }
        return str.toString();
    }


  // 7. 1704. Determine if String Halves Are Alike.
    public static boolean halvesAreAlike(String s) {
        String str1 = s.substring(0, s.length() / 2);
        String str2 = s.substring(s.length() / 2);
        int count1 = 0;
        int count2 = 0;
        for (int i = 0; i < s.length() / 2; i++) {
            char ch = str1.charAt(i);
            char ch1 = str2.charAt(i);
            if (isVowel(ch)) {
                count1++;
            }
            if (isVowel(ch1)) {
                count2++;
            }
        }
        if (count1 == count2)
            return true;
        return false;
    }

    public static boolean isVowel(char ch) {
        return switch (ch) {
            case 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' -> true;
            default -> false;
        };
    }


 // 8. 1309. Decrypt String from Alphabet to Integer Mapping.
    public static String freqAlphabets(String s) {
        StringBuilder result = new StringBuilder();
        for(int i = s.length() - 1; i >= 0; i--){
            int number;
            if(s.charAt(i) == '#'){
                number = (s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0');
                i = i - 2;
            }else {
                number = s.charAt(i) - '0';
            }
            result.append((char) (number + 96));
        }
       return result.reverse().toString();
    }


// 9. 1967. Number of Strings That Appear as Substrings in Word.
    public static int numOfStrings(String[] patterns, String word) {
        int count = 0;
        for(String s : patterns){
            boolean isPresent = word.contains(s);
            if(isPresent)
                count++;
        }
        return count;
    }


// 10. 657 Robot Return to Origin
   public static boolean judgeCircle(String moves) {
        int[] count = {0,0};
        for(int i = 0; i < moves.length(); i++){
            if(moves.charAt(i) == 'R'){
                count[0] += 1;
            }else if(moves.charAt(i) == 'L'){
                count[0] -= 1;
            }else if(moves.charAt(i) == 'U'){
                count[1] += 1;
            }else{
                count[1] -= 1;
            }
        }
        if(count[0] == 0 && count[1] == 0){
            return true;
        }
        return false;
   }


 // 11. 557. Reverse Words in a String III.
   public static String reverseWords(String s) {
        String[] str = s.split(" ");
        StringBuilder result = new StringBuilder();
        for(int i = 0; i < str.length; i++) {
            StringBuilder reversed = new StringBuilder(str[i]).reverse();
            result.append(reversed).append(" ");
        }
       return result.toString().trim();
   }


 // 12. 28. Find the Index of the First Occurrence in a String.
   public static  int strStr(String haystack, String needle) {
       int nIndex = 0;
       for(int i=0; i<haystack.length(); i++){
           if(haystack.charAt(i)==needle.charAt(nIndex)){
               nIndex++;
           }
           else{
               i=i-nIndex;
               nIndex=0;
           }
           if(nIndex==needle.length()){
               return i-needle.length()+1;
           }
       }
       return -1;
   }


// 13. 925. Long Pressed Name.
  public static boolean isLongPressedName(String name, String typed) {
          int i = 0;
          int j = 0;
          char prev = name.charAt(0);
          char c2 = typed.charAt(0);
          char c1 = prev;
          while(i < name.length() && j < typed.length() ){
              c1 = name.charAt(i);
              c2 = typed.charAt(j);
              if(c1 == c2){
                  i++;
                  j++;
                  prev = c1;
              }
              else if(c2 == prev){
                  j++;
              }
              else{
                  return false;
              }
          }
          while(j<typed.length()){
              c2 = typed.charAt(j);
              if(c2 != c1){
                  return false;
              }
              j++;
          }
          return i==name.length() && j==typed.length();
      
  }


  // 14. 125. Valid Palindrome.
  public static boolean isPalindrome(String s) {
    StringBuilder s1 = new StringBuilder();
    for(int i = 0; i < s.length(); i++){
        if(Character.isAlphabetic(s.charAt(i)) || Character.isDigit(s.charAt(i))){
            s1.append(Character.toLowerCase(s.charAt(i)));
        }
    }
    int i = 0;
    int j = s1.length() - 1;
    while (i <= j){
        if(s1.charAt(j) != s1.charAt(i)){
            return false;
        }
        i++;
        j--;
    }
    return true;
  }


  // 15. 680. Valid Palindrome II.
    public static boolean validPalindrome(String s) {
     int i = 0;
     int j = s.length() - 1;
     while (i <= j){
         if(s.charAt(i) == s.charAt(j)){
             i++;
             j--;
         }else{
             return checkPalindrome(s,i+1,j) || checkPalindrome(s,i,j-1);
         }
     }
     return true;
    }
    public static boolean  checkPalindrome(String s, int i, int j){
        while (i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }


// 16. 14. Longest Common Prefix.
  public static String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
      StringBuilder str = new StringBuilder();
        for(int i = 0; i < strs[0].length(); i++){
            if(strs[0].charAt(i) == strs[strs.length - 1].charAt(i)){
                str.append(strs[0].charAt(i));
            }else{
               break;
            }
        }
        return str.toString();
  }


  // 17. 1668. Maximum Repeating Substring.
  public static int maxRepeating(String sequence, String word) {
      int count = 0;
      StringBuilder sb = new StringBuilder(word);
      while (sequence.contains(sb)){
          count++;
          sb.append(word);
      }
      return count;
  }


  // 18. 58. Length of Last Word.
  public static int lengthOfLastWord(String s) {
        String[] str = s.split(" ");
      return str[str.length - 1].length();
    }


// 19. 20. Valid Parentheses.
  public static boolean isValid(String s) {
      Stack<Character> stk = new Stack<>();
      for(int i = 0; i < s.length(); i++){
          if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '['){
              stk.push(s.charAt(i));
          }else if(stk.isEmpty()) {
              return false;
          }else if(stk.peek() == '(' && s.charAt(i) == ')'){
              stk.pop();
          }else if(stk.peek() == '{' && s.charAt(i) == '}'){
              stk.pop();
          } else if(stk.peek() == '[' && s.charAt(i) == ']') {
              stk.pop();
          }else{
              return false;
          }
      }
        return stk.isEmpty();
  }


    // 20. 13. Roman to Integer.
    public static int romanToInt(String s) {
        int num = 0;
        for(int i = 0; i < s.length(); i++){
            if(i < s.length() - 1 &&engToNum(s.charAt(i)) < engToNum(s.charAt(i + 1))){
                num -= engToNum(s.charAt(i));
            }else{
                num +=  engToNum(s.charAt(i));
            }
        }
        return num;
    }
    public static int engToNum(char ch){
        int number = 0;
        switch (ch){
            case 'I':
                 number = 1;
                break;
            case 'V':
                number = 5;
            break;
            case 'X':
                number =  10;
            break;
            case 'L':
                number = 50;
            break;
            case 'C':
                number = 100;
            break;
            case 'D':
                number = 500;
            break;
            case 'M':
                number = 1000;
        }
        return  number;
    }



    // 21. 2000. Reverse Prefix of Word.
    public static String reversePrefix(String word, char ch) {
        StringBuilder stb = new StringBuilder();
        int num = 0;
        if (!word.contains(ch + "")) {
            return word;
        }
        for (int i = 0; i < word.length(); i++) {
            if (word.charAt(i) == ch) {
                num = i;
                stb.append(word.charAt(i));
                break;
            } else {
                stb.append(word.charAt(i));
            }
        }
        return stb.reverse().toString() + word.substring(num + 1);
    }


    // 22. 1768. Merge Strings Alternately.
    public static String mergeAlternately(String word1, String word2) {
        StringBuilder stb = new StringBuilder();
       int i = 0;
       while (i < word1.length() || i < word2.length()){
           if(i < word1.length()){
               stb.append(word1.charAt(i));
           }
           if(i < word2.length()){
               stb.append(word2.charAt(i));
           }
           i++;
       }
       return stb.toString();
    }



//    23. 1784. Check if Binary String Has at Most One Segment of Ones.
    public boolean checkOnesSegment(String s) {
        int i=0,j=i+1;
        boolean is = false;
        while(j<s.length()) {
            if(s.charAt(i) == '1') {
                if(s.charAt(j) == '1' && is) {
                    return false;
                } else if(s.charAt(j) == '0'){
                    is = true;
                }
            }
            j++;
        }
        return true;
    }


   // 24. 2185. Counting Words With a Given Prefix.
    public static int prefixCount(String[] words, String pref) {
        int count = 0;
        for (int i = 0; i < words.length; i++) {
            if (words[i].length() >= pref.length() &&words[i].substring(0, pref.length()).equals(pref)) {
                count++;
            }
        }
        return count;


    }


    // 25. 1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence.
    public static int isPrefixOfWord(String sentence, String searchWord) {

        String[] words = sentence.split(" ");
        int i = 0;
        for(String word : words){
            i++;
            if(word.length() >= searchWord.length() && word.substring(0,searchWord.length()).equals(searchWord)){
                return i ;
            }
        }
        return -1;
    }



    // 26. 1408. String Matching in an Array.
    public static List<String> stringMatching(String[] words) {
        ArrayList<String> result = new ArrayList<>();
        for(int i = 0; i < words.length; i++){
            for(int j = 0; j < words.length; j++){
                if(i != j && words[j].contains(words[i])){
                    result.add(words[i]);
                    break;
                }
            }
        }


        return result;
    }



    // 27. 796. Rotate String.
    public boolean rotateString(String s, String goal) {
        if(s.length() != goal.length()){
            return false;
        }
        StringBuilder str = new StringBuilder(s);
        str.append(s);

        return str.indexOf(goal) != -1;
    }


    // 28. 2011. Final Value of Variable After Performing Operations.
    public static int finalValueAfterOperations(String[] operations) {
        int result = 0;
        for(String oper : operations) {
            result = switch (oper) {
                case "--X", "X--" -> result - 1;
                case "X++", "++X" -> result + 1;
                default -> result;
            };
        }
        return result;
    }


    // 29. 771. Jewels and Stones.
    public static int numJewelsInStones(String jewels, String stones) {
        int count = 0;
        for(int i = 0; i < jewels.length(); i++){
            for(int j = 0; j < stones.length(); j++){
                if(jewels.charAt(i) == stones.charAt(j)){
                    count++;
                }
            }
        }


        return count;
    }


// 30 . 2942. Find Words Containing Character.
    public static List<Integer> findWordsContaining(String[] words, char x) {
        ArrayList<Integer> result = new ArrayList<>();

        for (int i = 0; i < words.length; i++){
            int output = words[i].indexOf(x);
            if(output != -1){
                result.add(i);
            }
        }
        return result;
    }


// 31.   2114. Maximum Number of Words Found in Sentences.
    public static int mostWordsFound(String[] sentences) {
      int max = 0;
      for(String str : sentences){
          String[] arr = str.split(" ");

          if(arr.length > max){
              max = arr.length;
          }
      }
      return max;
    }


    // 32. 1221. Split a String in Balanced Strings.
    public static int balancedStringSplit(String s) {
        int rCounter = 0;
        int lCounter = 0;
        int counter = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == 'R'){
                rCounter++;
            }else {
                lCounter++;
            }

            if(rCounter == lCounter){
                counter++;
            }
        }
        return counter;
    }



    // 33. 1816. Truncate Sentence.
    public static String truncateSentence(String s, int k) {
        StringBuilder result = new StringBuilder();
        String[] arr = s.split(" ");
        for(int i = 0; i < k; i++){
            result.append(arr[i] + " ");
        }
        return result.toString().trim();
    }



    // 34. 1684. Count the Number of Consistent Strings.
    public static int countConsistentStrings(String allowed, String[] words) {

        int count = 0;

        outerloop:
        for(int i = 0; i < words.length; i++){
            for(int j = 0; j < words[i].length(); j++){
                if(!allowed.contains(String.valueOf(words[i].charAt(j)))){
                    continue outerloop;
                }
            }
            count++;
        }

        return count;
    }


// 35. // 804. Unique Morse Code Words.
    public static int uniqueMorseRepresentations(String[] words) {
        String [] morseCode = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".--" +
                "-","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--"
                ,"-..-","-.--","--.."};

        ArrayList<String> lst = new ArrayList<>();
        for(String word : words){
            String code = "";
            for(int i = 0; i < word.length(); i++){
                code += morseCode[word.charAt(i) - 97];
            }
            if(!lst.contains(code)){
                lst.add(code);
            }

        }
        return lst.size();
    }

// 35. 2828. Check if a String Is an Acronym of Words.
    public static boolean isAcronym(List<String> words, String s) {

        if(words.size() != s.length()){
            return false;
        }

        for(int i = 0; i < words.size(); i++){
            if((words.get(i).charAt(0) != s.charAt(i))){
                return false;
            }
        }
        return true;
    }


    // 36. 2810. Faulty Keyboard.
    public static String finalString(String s) {

        StringBuilder str = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == 'i'){
                str.reverse();
            }else {
                str.append(s.charAt(i));
            }
        }


        return str.toString();
    }


// 37.  1021. Remove Outermost Parentheses.
    public static String removeOuterParentheses(String s) {
        int count = 0;
        StringBuilder sb = new StringBuilder();
        boolean add = false;

        for(char c : s.toCharArray()){
            if(c == '('){
                count++;
            }else if(c == ')'){
                count--;
            }
            if(c == '(' && count == 2){
                add = true;
            }else if(c == ')' && count == 0){
                add = false;
            }
            if(add){
                sb.append(c);
            }
        }
        return sb.toString();
    }
