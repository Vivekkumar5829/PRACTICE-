    // 1. Find whether an array is subset of another array.
    public static boolean isSubset(int arr1[], int arr2[]){
        int i;
        int j;
       for( i = 0; i < arr2.length; i++){
           for(j = 0; j < arr1.length; j++){
               if(arr2[i] == arr1[j]){
                   break;
               }
           }
           if(j == arr1.length){
               return false;
           }
       }
       return true;
    }


    // Using hashing.

    public static boolean isSubset2(int[] arr1, int[] arr2){
        HashSet<Integer> set = new HashSet<>();
        for(int i : arr1){
            set.add(i);
        }
        for(int i = 0; i < arr2.length; i++){
            if(!set.contains(arr2[i])){
                return false;
            }
        }
        return true;
    }



 // 2. Check if pair with given Sum exists in Array (Two Sum).
    public static boolean twoSum(int[] arr, int x){
        HashSet<Integer> set = new HashSet<>();
        for(int i = 0; i < arr.length; i++){
            int temp = x - arr[i];
            if(set.contains(temp)){
                return true;
            }
            set.add(arr[i]);
        }
        return false;
    }


 // 3.Maximum distance between two occurrences of same element in array.
    public static int maximumDistance(int[] arr){
        HashMap<Integer,Integer>  map = new HashMap<>();
        int maxDistance = 0;
        for(int i = 0; i < arr.length; i++){
            if(!map.containsKey(arr[i])){
                map.put(arr[i],i);
            }else {
               maxDistance = Math.max(maxDistance, i - map.get(arr[i]));
            }
        }
        return maxDistance;
    }



    // 4. Most frequent element in an array.
    public static int mostFrequent(int[] arr){
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++){
            if(map.containsKey(arr[i])){
                int freq = map.get(arr[i]);
                freq++;
                map.put(arr[i],freq);
            }else {
                map.put(arr[i],1);
            }
        }
        int maxCount = 0;
        int result = 0;
        for(Map.Entry<Integer, Integer> val : map.entrySet()){
            if(maxCount < val.getValue()){
                result  = val.getKey();
                maxCount = val.getValue();

            }
        }
        return result;
    }



    // 5. Find the only repetitive element between 1 to N-1.
    public static int findRepeating(int[] arr){
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++){
            if(map.containsKey(arr[i])){
                int freq = map.get(arr[i]);
                freq++;
                map.put(arr[i], freq);
            }else {
                map.put(arr[i],1);
            }
        }
        for(Map.Entry<Integer, Integer> val : map.entrySet()){
            if(val.getValue() == 2){
                return val.getKey();
            }
        }
        return -1;
    }

// 6. How to check if two given sets are disjoint?
public static boolean  aredisjoint(int arr1[], int arr2[]){
        HashSet<Integer> lst = new HashSet<>();
        for(int i : arr1){
            lst.add(i);
        }
        for(int j : arr2){
            if(lst.contains(j)){
                return false;
            }
        }
        return true;
    }


 // 7. Non-overlapping sum of two sets.
    public static int nonOverlappingSum(int[] arr1, int[] arr2){
        HashSet<Integer> set = new HashSet<>();
        int sum = 0;
        for(int i : arr1){
            set.add(i);
            sum += i;
        }

        for(int i = 0; i < arr2.length; i++){
            if(!set.contains(arr2[i])){
                set.add(i);
                sum += arr2[i];
            }else{
                sum -= arr2[i];
            }
        }
        return sum;
    }



 // 8. Find missing elements of a range.
    public static void missingNumber(int[] arr, int low, int high){
        HashSet<Integer> set = new HashSet<>();

        for (int i = 0; i < arr.length; i++){
            set.add(arr[i]);
        }
        for(int i = low; i <= high; i++){
            if(!set.contains(i)){
                System.out.println(i);
            }
        }
    }



    // 9. Remove minimum number of elements such that no common element exist in both array.
    public static void minRemove(int[] arr1, int[] arr2){
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < arr1.length; i++){
            set.add(arr1[i]);
        }
        HashSet<Integer> set2 = new HashSet<>();
        for(int i = 0; i < arr2.length; i++){
            set2.add(arr2[i]);
        }

        for(int i = 0; i < arr2.length; i++){
            if(set.contains(arr2[i])){
                set2.remove(arr2[i]);
            }
        }
        System.out.println(set2);
    }
